// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailViewItem detail view item
//
// swagger:model detailViewItem
type DetailViewItem struct {
	CapabilityKey

	// Specify the type of UI component to use to display this action or state. The corresponding field must also be included. For example, if you specify "switch" here, you must also include the "switch" key and its object definition for this action or state.
	// Required: true
	// Enum: [toggleSwitch standbyPowerSwitch switch slider pushButton playPause playStop list textField numberField stepper state multiArgCommand]
	DisplayType *string `json:"displayType"`

	// label
	// Required: true
	Label *string `json:"label"`

	// list
	List *ListForDetailView `json:"list,omitempty"`

	// multi arg command
	MultiArgCommand *MultiArgCommand `json:"multiArgCommand,omitempty"`

	// number field
	NumberField *NumberField `json:"numberField,omitempty"`

	// play pause
	PlayPause *PlayPause `json:"playPause,omitempty"`

	// play stop
	PlayStop *PlayStop `json:"playStop,omitempty"`

	// push button
	PushButton *PushButton `json:"pushButton,omitempty"`

	// slider
	Slider *Slider `json:"slider,omitempty"`

	// standby power switch
	StandbyPowerSwitch *StandbyPowerSwitch `json:"standbyPowerSwitch,omitempty"`

	// state
	State *State `json:"state,omitempty"`

	// stepper
	Stepper *Stepper `json:"stepper,omitempty"`

	// switch
	Switch *Switch `json:"switch,omitempty"`

	// text field
	TextField *TextField `json:"textField,omitempty"`

	// toggle switch
	ToggleSwitch *ToggleSwitch `json:"toggleSwitch,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DetailViewItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CapabilityKey
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CapabilityKey = aO0

	// AO1
	var dataAO1 struct {
		DisplayType *string `json:"displayType"`

		Label *string `json:"label"`

		List *ListForDetailView `json:"list,omitempty"`

		MultiArgCommand *MultiArgCommand `json:"multiArgCommand,omitempty"`

		NumberField *NumberField `json:"numberField,omitempty"`

		PlayPause *PlayPause `json:"playPause,omitempty"`

		PlayStop *PlayStop `json:"playStop,omitempty"`

		PushButton *PushButton `json:"pushButton,omitempty"`

		Slider *Slider `json:"slider,omitempty"`

		StandbyPowerSwitch *StandbyPowerSwitch `json:"standbyPowerSwitch,omitempty"`

		State *State `json:"state,omitempty"`

		Stepper *Stepper `json:"stepper,omitempty"`

		Switch *Switch `json:"switch,omitempty"`

		TextField *TextField `json:"textField,omitempty"`

		ToggleSwitch *ToggleSwitch `json:"toggleSwitch,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DisplayType = dataAO1.DisplayType

	m.Label = dataAO1.Label

	m.List = dataAO1.List

	m.MultiArgCommand = dataAO1.MultiArgCommand

	m.NumberField = dataAO1.NumberField

	m.PlayPause = dataAO1.PlayPause

	m.PlayStop = dataAO1.PlayStop

	m.PushButton = dataAO1.PushButton

	m.Slider = dataAO1.Slider

	m.StandbyPowerSwitch = dataAO1.StandbyPowerSwitch

	m.State = dataAO1.State

	m.Stepper = dataAO1.Stepper

	m.Switch = dataAO1.Switch

	m.TextField = dataAO1.TextField

	m.ToggleSwitch = dataAO1.ToggleSwitch

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DetailViewItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CapabilityKey)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DisplayType *string `json:"displayType"`

		Label *string `json:"label"`

		List *ListForDetailView `json:"list,omitempty"`

		MultiArgCommand *MultiArgCommand `json:"multiArgCommand,omitempty"`

		NumberField *NumberField `json:"numberField,omitempty"`

		PlayPause *PlayPause `json:"playPause,omitempty"`

		PlayStop *PlayStop `json:"playStop,omitempty"`

		PushButton *PushButton `json:"pushButton,omitempty"`

		Slider *Slider `json:"slider,omitempty"`

		StandbyPowerSwitch *StandbyPowerSwitch `json:"standbyPowerSwitch,omitempty"`

		State *State `json:"state,omitempty"`

		Stepper *Stepper `json:"stepper,omitempty"`

		Switch *Switch `json:"switch,omitempty"`

		TextField *TextField `json:"textField,omitempty"`

		ToggleSwitch *ToggleSwitch `json:"toggleSwitch,omitempty"`
	}

	dataAO1.DisplayType = m.DisplayType

	dataAO1.Label = m.Label

	dataAO1.List = m.List

	dataAO1.MultiArgCommand = m.MultiArgCommand

	dataAO1.NumberField = m.NumberField

	dataAO1.PlayPause = m.PlayPause

	dataAO1.PlayStop = m.PlayStop

	dataAO1.PushButton = m.PushButton

	dataAO1.Slider = m.Slider

	dataAO1.StandbyPowerSwitch = m.StandbyPowerSwitch

	dataAO1.State = m.State

	dataAO1.Stepper = m.Stepper

	dataAO1.Switch = m.Switch

	dataAO1.TextField = m.TextField

	dataAO1.ToggleSwitch = m.ToggleSwitch

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this detail view item
func (m *DetailViewItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CapabilityKey
	if err := m.CapabilityKey.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiArgCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayPause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandbyPowerSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepper(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToggleSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var detailViewItemTypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["toggleSwitch","standbyPowerSwitch","switch","slider","pushButton","playPause","playStop","list","textField","numberField","stepper","state","multiArgCommand"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailViewItemTypeDisplayTypePropEnum = append(detailViewItemTypeDisplayTypePropEnum, v)
	}
}

// property enum
func (m *DetailViewItem) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, detailViewItemTypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DetailViewItem) validateDisplayType(formats strfmt.Registry) error {

	if err := validate.Required("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", *m.DisplayType); err != nil {
		return err
	}

	return nil
}

func (m *DetailViewItem) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *DetailViewItem) validateList(formats strfmt.Registry) error {

	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateMultiArgCommand(formats strfmt.Registry) error {

	if swag.IsZero(m.MultiArgCommand) { // not required
		return nil
	}

	if m.MultiArgCommand != nil {
		if err := m.MultiArgCommand.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiArgCommand")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateNumberField(formats strfmt.Registry) error {

	if swag.IsZero(m.NumberField) { // not required
		return nil
	}

	if m.NumberField != nil {
		if err := m.NumberField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberField")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validatePlayPause(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayPause) { // not required
		return nil
	}

	if m.PlayPause != nil {
		if err := m.PlayPause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("playPause")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validatePlayStop(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayStop) { // not required
		return nil
	}

	if m.PlayStop != nil {
		if err := m.PlayStop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("playStop")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validatePushButton(formats strfmt.Registry) error {

	if swag.IsZero(m.PushButton) { // not required
		return nil
	}

	if m.PushButton != nil {
		if err := m.PushButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushButton")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateSlider(formats strfmt.Registry) error {

	if swag.IsZero(m.Slider) { // not required
		return nil
	}

	if m.Slider != nil {
		if err := m.Slider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slider")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateStandbyPowerSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.StandbyPowerSwitch) { // not required
		return nil
	}

	if m.StandbyPowerSwitch != nil {
		if err := m.StandbyPowerSwitch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standbyPowerSwitch")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateStepper(formats strfmt.Registry) error {

	if swag.IsZero(m.Stepper) { // not required
		return nil
	}

	if m.Stepper != nil {
		if err := m.Stepper.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stepper")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.Switch) { // not required
		return nil
	}

	if m.Switch != nil {
		if err := m.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateTextField(formats strfmt.Registry) error {

	if swag.IsZero(m.TextField) { // not required
		return nil
	}

	if m.TextField != nil {
		if err := m.TextField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textField")
			}
			return err
		}
	}

	return nil
}

func (m *DetailViewItem) validateToggleSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.ToggleSwitch) { // not required
		return nil
	}

	if m.ToggleSwitch != nil {
		if err := m.ToggleSwitch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("toggleSwitch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetailViewItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailViewItem) UnmarshalBinary(b []byte) error {
	var res DetailViewItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
