// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DpInfo Information used for obtaining details page plugins on different platforms. Array of Details page link objects.
//
// swagger:model dpInfo
type DpInfo []*DpInfoItems0

// Validate validates this dp info
func (m DpInfo) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// DpInfoItems0 dp info items0
//
// swagger:model DpInfoItems0
type DpInfoItems0 struct {

	// This is linked to obtain the vendor-specific device details page. The device's dashboard card opens the detail view using this link when the user clicks the device card.
	// Required: true
	DpURI *string `json:"dpUri"`

	// This describes operating mode after onboarding. `easySetup` will launch the plugin for setting up your device while `deviceControl` will launch the plugin for controlling the device directly after onboarding.
	OperatingMode string `json:"operatingMode,omitempty"`

	// The OS of the UI Client used to show the details page. 'iOS': iOS SmartThings 'android': Android SmartThings
	// Required: true
	// Enum: [android ios web]
	Os *string `json:"os"`
}

// Validate validates this dp info items0
func (m *DpInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDpURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DpInfoItems0) validateDpURI(formats strfmt.Registry) error {

	if err := validate.Required("dpUri", "body", m.DpURI); err != nil {
		return err
	}

	return nil
}

var dpInfoItems0TypeOsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["android","ios","web"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dpInfoItems0TypeOsPropEnum = append(dpInfoItems0TypeOsPropEnum, v)
	}
}

const (

	// DpInfoItems0OsAndroid captures enum value "android"
	DpInfoItems0OsAndroid string = "android"

	// DpInfoItems0OsIos captures enum value "ios"
	DpInfoItems0OsIos string = "ios"

	// DpInfoItems0OsWeb captures enum value "web"
	DpInfoItems0OsWeb string = "web"
)

// prop value enum
func (m *DpInfoItems0) validateOsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dpInfoItems0TypeOsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DpInfoItems0) validateOs(formats strfmt.Registry) error {

	if err := validate.Required("os", "body", m.Os); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsEnum("os", "body", *m.Os); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DpInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DpInfoItems0) UnmarshalBinary(b []byte) error {
	var res DpInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
