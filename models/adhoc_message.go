// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdhocMessage An adhoc message contains a list of message templates representing the same message in different locales. The
// system will serve the template with the locale that best matches the Recipient's language preferences. If the
// user's language preferences do not correlate to any message templates, the template defined by the
// `fallbackLocale` will be used. Variables from the template matching the locale of the Message will be assigned
// first, then `defaultVariables`.
//
//
// swagger:model AdhocMessage
type AdhocMessage struct {

	// A map<string,string> with the key representing the variable name, and the value representing the verbiage
	// to be replaced in template string. `defaultVariables` will only be used if there are no matching locale-level
	// (template) variables for that key.
	//
	DefaultVariables map[string]string `json:"defaultVariables,omitempty"`

	// fallback locale
	// Required: true
	FallbackLocale LocaleTag `json:"fallbackLocale"`

	// A list of templates representing the same message in different languages.
	// Required: true
	// Max Items: 35
	// Min Items: 1
	Templates []*AdhocMessageTemplate `json:"templates"`
}

// Validate validates this adhoc message
func (m *AdhocMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFallbackLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdhocMessage) validateFallbackLocale(formats strfmt.Registry) error {

	if err := m.FallbackLocale.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fallbackLocale")
		}
		return err
	}

	return nil
}

func (m *AdhocMessage) validateTemplates(formats strfmt.Registry) error {

	if err := validate.Required("templates", "body", m.Templates); err != nil {
		return err
	}

	iTemplatesSize := int64(len(m.Templates))

	if err := validate.MinItems("templates", "body", iTemplatesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("templates", "body", iTemplatesSize, 35); err != nil {
		return err
	}

	for i := 0; i < len(m.Templates); i++ {
		if swag.IsZero(m.Templates[i]) { // not required
			continue
		}

		if m.Templates[i] != nil {
			if err := m.Templates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdhocMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdhocMessage) UnmarshalBinary(b []byte) error {
	var res AdhocMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
