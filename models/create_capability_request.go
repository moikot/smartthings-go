// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCapabilityRequest create capability request
//
// swagger:model CreateCapabilityRequest
type CreateCapabilityRequest struct {

	// A mapping of attribute names to their definitions. All attribute names are lower camelcase. Required if no commands are specified.
	Attributes map[string]CapabilityAttribute `json:"attributes,omitempty"`

	// A mapping of command names to their definitions. All command names are lower camelcase. Required if no attributes are specified.
	Commands map[string]CapabilityCommand `json:"commands,omitempty"`

	// An alphanumeric English language name for the capability.
	// Required: true
	// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9 ]{1,35}$
	Name *string `json:"name"`
}

// Validate validates this create capability request
func (m *CreateCapabilityRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCapabilityRequest) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for k := range m.Attributes {

		if err := validate.Required("attributes"+"."+k, "body", m.Attributes[k]); err != nil {
			return err
		}
		if val, ok := m.Attributes[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CreateCapabilityRequest) validateCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	for k := range m.Commands {

		if err := validate.Required("commands"+"."+k, "body", m.Commands[k]); err != nil {
			return err
		}
		if val, ok := m.Commands[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CreateCapabilityRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[a-zA-Z0-9][a-zA-Z0-9 ]{1,35}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCapabilityRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCapabilityRequest) UnmarshalBinary(b []byte) error {
	var res CreateCapabilityRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
