// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceRequest update device request
//
// swagger:model UpdateDeviceRequest
type UpdateDeviceRequest struct {

	// components
	Components []*UpdateDeviceRequestComponentsItems0 `json:"components"`

	// The label for the device.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Label *string `json:"label"`
}

// Validate validates this update device request
func (m *UpdateDeviceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDeviceRequest) validateComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateDeviceRequest) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	if err := validate.MinLength("label", "body", string(*m.Label), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("label", "body", string(*m.Label), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDeviceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDeviceRequest) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateDeviceRequestComponentsItems0 update device request components items0
//
// swagger:model UpdateDeviceRequestComponentsItems0
type UpdateDeviceRequestComponentsItems0 struct {

	// A case-sensitive string from the pre-defined list of valid categories [/devicecategories](#/operation/listCategories).
	// Required: true
	// Max Items: 1
	// Min Items: 1
	Categories []string `json:"categories"`

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this update device request components items0
func (m *UpdateDeviceRequestComponentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDeviceRequestComponentsItems0) validateCategories(formats strfmt.Registry) error {

	if err := validate.Required("categories", "body", m.Categories); err != nil {
		return err
	}

	iCategoriesSize := int64(len(m.Categories))

	if err := validate.MinItems("categories", "body", iCategoriesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("categories", "body", iCategoriesSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *UpdateDeviceRequestComponentsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDeviceRequestComponentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDeviceRequestComponentsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceRequestComponentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
