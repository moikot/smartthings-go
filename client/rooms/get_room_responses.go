// Code generated by go-swagger; DO NOT EDIT.

package rooms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// GetRoomReader is a Reader for the GetRoom structure.
type GetRoomReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoomReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoomOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoomBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoomUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoomForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoomTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRoomDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRoomOK creates a GetRoomOK with default headers values
func NewGetRoomOK() *GetRoomOK {
	return &GetRoomOK{}
}

/*GetRoomOK handles this case with default header values.

A Room.
*/
type GetRoomOK struct {
	Payload *models.Room
}

func (o *GetRoomOK) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/rooms/{roomId}][%d] getRoomOK  %+v", 200, o.Payload)
}

func (o *GetRoomOK) GetPayload() *models.Room {
	return o.Payload
}

func (o *GetRoomOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Room)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoomBadRequest creates a GetRoomBadRequest with default headers values
func NewGetRoomBadRequest() *GetRoomBadRequest {
	return &GetRoomBadRequest{}
}

/*GetRoomBadRequest handles this case with default header values.

Bad request
*/
type GetRoomBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetRoomBadRequest) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/rooms/{roomId}][%d] getRoomBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoomBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoomBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoomUnauthorized creates a GetRoomUnauthorized with default headers values
func NewGetRoomUnauthorized() *GetRoomUnauthorized {
	return &GetRoomUnauthorized{}
}

/*GetRoomUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRoomUnauthorized struct {
}

func (o *GetRoomUnauthorized) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/rooms/{roomId}][%d] getRoomUnauthorized ", 401)
}

func (o *GetRoomUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRoomForbidden creates a GetRoomForbidden with default headers values
func NewGetRoomForbidden() *GetRoomForbidden {
	return &GetRoomForbidden{}
}

/*GetRoomForbidden handles this case with default header values.

Forbidden
*/
type GetRoomForbidden struct {
}

func (o *GetRoomForbidden) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/rooms/{roomId}][%d] getRoomForbidden ", 403)
}

func (o *GetRoomForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRoomTooManyRequests creates a GetRoomTooManyRequests with default headers values
func NewGetRoomTooManyRequests() *GetRoomTooManyRequests {
	return &GetRoomTooManyRequests{}
}

/*GetRoomTooManyRequests handles this case with default header values.

Too many requests
*/
type GetRoomTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetRoomTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/rooms/{roomId}][%d] getRoomTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoomTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoomTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoomDefault creates a GetRoomDefault with default headers values
func NewGetRoomDefault(code int) *GetRoomDefault {
	return &GetRoomDefault{
		_statusCode: code,
	}
}

/*GetRoomDefault handles this case with default header values.

Unexpected error
*/
type GetRoomDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get room default response
func (o *GetRoomDefault) Code() int {
	return o._statusCode
}

func (o *GetRoomDefault) Error() string {
	return fmt.Sprintf("[GET /locations/{locationId}/rooms/{roomId}][%d] getRoom default  %+v", o._statusCode, o.Payload)
}

func (o *GetRoomDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoomDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
