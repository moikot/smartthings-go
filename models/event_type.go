// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventType The type of event passed to the app being executed. The type will be one of:
//   * DEVICE_COMMANDS_EVENT - _Only applicable for cloud-to-cloud device integration apps._ An event as a result of a device command execution request.
//   * DEVICE_EVENT - A device event as a result of a subscription the app created.
//   * DEVICE_HEALTH_EVENT - A device health event as a result of a change in a device's health.
//   * DEVICE_LIFECYCLE_EVENT - A device lifecycle event as the result of a life change to the device.
//   * HUB_HEALTH_EVENT - A hub health event as a result of a change in a hub's health.
//   * MODE_EVENT - A mode event is triggered when the location's mode is changed.
//   * SCENE_LIFECYCLE_EVENT - A scene lifecycle event as a result of a life change to the scene.
//   * SECURITY_ARM_STATE_EVENT - A security arm state event as a result of a change in the arm state of a security system.
//   * TIMER_EVENT - An event as a result of a scheduled app execution.
//   * WEATHER_EVENT - An event with weather information.
//
//
// swagger:model EventType
type EventType string

const (

	// EventTypeDEVICECOMMANDSEVENT captures enum value "DEVICE_COMMANDS_EVENT"
	EventTypeDEVICECOMMANDSEVENT EventType = "DEVICE_COMMANDS_EVENT"

	// EventTypeDEVICEEVENT captures enum value "DEVICE_EVENT"
	EventTypeDEVICEEVENT EventType = "DEVICE_EVENT"

	// EventTypeDEVICEHEALTHEVENT captures enum value "DEVICE_HEALTH_EVENT"
	EventTypeDEVICEHEALTHEVENT EventType = "DEVICE_HEALTH_EVENT"

	// EventTypeDEVICELIFECYCLEEVENT captures enum value "DEVICE_LIFECYCLE_EVENT"
	EventTypeDEVICELIFECYCLEEVENT EventType = "DEVICE_LIFECYCLE_EVENT"

	// EventTypeHUBHEALTHEVENT captures enum value "HUB_HEALTH_EVENT"
	EventTypeHUBHEALTHEVENT EventType = "HUB_HEALTH_EVENT"

	// EventTypeMODEEVENT captures enum value "MODE_EVENT"
	EventTypeMODEEVENT EventType = "MODE_EVENT"

	// EventTypeSCENELIFECYCLEEVENT captures enum value "SCENE_LIFECYCLE_EVENT"
	EventTypeSCENELIFECYCLEEVENT EventType = "SCENE_LIFECYCLE_EVENT"

	// EventTypeSECURITYARMSTATEEVENT captures enum value "SECURITY_ARM_STATE_EVENT"
	EventTypeSECURITYARMSTATEEVENT EventType = "SECURITY_ARM_STATE_EVENT"

	// EventTypeTIMEREVENT captures enum value "TIMER_EVENT"
	EventTypeTIMEREVENT EventType = "TIMER_EVENT"

	// EventTypeINSTALLEDAPPLIFECYCLEEVENT captures enum value "INSTALLED_APP_LIFECYCLE_EVENT"
	EventTypeINSTALLEDAPPLIFECYCLEEVENT EventType = "INSTALLED_APP_LIFECYCLE_EVENT"

	// EventTypeWEATHEREVENT captures enum value "WEATHER_EVENT"
	EventTypeWEATHEREVENT EventType = "WEATHER_EVENT"
)

// for schema
var eventTypeEnum []interface{}

func init() {
	var res []EventType
	if err := json.Unmarshal([]byte(`["DEVICE_COMMANDS_EVENT","DEVICE_EVENT","DEVICE_HEALTH_EVENT","DEVICE_LIFECYCLE_EVENT","HUB_HEALTH_EVENT","MODE_EVENT","SCENE_LIFECYCLE_EVENT","SECURITY_ARM_STATE_EVENT","TIMER_EVENT","INSTALLED_APP_LIFECYCLE_EVENT","WEATHER_EVENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventTypeEnum = append(eventTypeEnum, v)
	}
}

func (m EventType) validateEventTypeEnum(path, location string, value EventType) error {
	if err := validate.EnumCase(path, location, value, eventTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this event type
func (m EventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
