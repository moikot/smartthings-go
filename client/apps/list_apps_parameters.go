// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListAppsParams creates a new ListAppsParams object
// with the default values initialized.
func NewListAppsParams() *ListAppsParams {
	var ()
	return &ListAppsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAppsParamsWithTimeout creates a new ListAppsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAppsParamsWithTimeout(timeout time.Duration) *ListAppsParams {
	var ()
	return &ListAppsParams{

		timeout: timeout,
	}
}

// NewListAppsParamsWithContext creates a new ListAppsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAppsParamsWithContext(ctx context.Context) *ListAppsParams {
	var ()
	return &ListAppsParams{

		Context: ctx,
	}
}

// NewListAppsParamsWithHTTPClient creates a new ListAppsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAppsParamsWithHTTPClient(client *http.Client) *ListAppsParams {
	var ()
	return &ListAppsParams{
		HTTPClient: client,
	}
}

/*ListAppsParams contains all the parameters to send to the API endpoint
for the list apps operation typically these are written to a http.Request
*/
type ListAppsParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*AppType
	  The App Type of the application.

	*/
	AppType *string
	/*Classification
	  An App maybe associated to many classifications.  A classification drives how the integration is presented
	to the user in the SmartThings mobile clients.  These classifications include:
	* AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
	* SERVICE - Denotes an integration that is classified as a "Service".
	* DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
	* CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.


	*/
	Classification *string
	/*Tag
	  May be used to filter a resource by it's assigned user-tags.  Multiple tag query params are automatically joined with OR.

	Example usage in query string:
	```
	?tag:key_name=value1&tag:key_name=value2
	```


	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list apps params
func (o *ListAppsParams) WithTimeout(timeout time.Duration) *ListAppsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list apps params
func (o *ListAppsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list apps params
func (o *ListAppsParams) WithContext(ctx context.Context) *ListAppsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list apps params
func (o *ListAppsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list apps params
func (o *ListAppsParams) WithHTTPClient(client *http.Client) *ListAppsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list apps params
func (o *ListAppsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the list apps params
func (o *ListAppsParams) WithAuthorization(authorization string) *ListAppsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the list apps params
func (o *ListAppsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAppType adds the appType to the list apps params
func (o *ListAppsParams) WithAppType(appType *string) *ListAppsParams {
	o.SetAppType(appType)
	return o
}

// SetAppType adds the appType to the list apps params
func (o *ListAppsParams) SetAppType(appType *string) {
	o.AppType = appType
}

// WithClassification adds the classification to the list apps params
func (o *ListAppsParams) WithClassification(classification *string) *ListAppsParams {
	o.SetClassification(classification)
	return o
}

// SetClassification adds the classification to the list apps params
func (o *ListAppsParams) SetClassification(classification *string) {
	o.Classification = classification
}

// WithTag adds the tag to the list apps params
func (o *ListAppsParams) WithTag(tag *string) *ListAppsParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the list apps params
func (o *ListAppsParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *ListAppsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.AppType != nil {

		// query param appType
		var qrAppType string
		if o.AppType != nil {
			qrAppType = *o.AppType
		}
		qAppType := qrAppType
		if qAppType != "" {
			if err := r.SetQueryParam("appType", qAppType); err != nil {
				return err
			}
		}

	}

	if o.Classification != nil {

		// query param classification
		var qrClassification string
		if o.Classification != nil {
			qrClassification = *o.Classification
		}
		qClassification := qrClassification
		if qClassification != "" {
			if err := r.SetQueryParam("classification", qClassification); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
