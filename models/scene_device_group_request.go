// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SceneDeviceGroupRequest JSON structure for a device group when creating a Scene
//
// swagger:model SceneDeviceGroupRequest
type SceneDeviceGroupRequest struct {

	// the id of the action to be created. Optional, sent by Reaver only
	ActionID string `json:"actionId,omitempty"`

	// capability
	Capability *SceneCapability `json:"capability,omitempty"`

	// the id of the device group
	// Required: true
	DeviceGroupID *string `json:"deviceGroupId"`
}

// Validate validates this scene device group request
func (m *SceneDeviceGroupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SceneDeviceGroupRequest) validateCapability(formats strfmt.Registry) error {

	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	if m.Capability != nil {
		if err := m.Capability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capability")
			}
			return err
		}
	}

	return nil
}

func (m *SceneDeviceGroupRequest) validateDeviceGroupID(formats strfmt.Registry) error {

	if err := validate.Required("deviceGroupId", "body", m.DeviceGroupID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SceneDeviceGroupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SceneDeviceGroupRequest) UnmarshalBinary(b []byte) error {
	var res SceneDeviceGroupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
