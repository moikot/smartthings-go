// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceEvent An event on a device that matched a subscription for this app.
//
// swagger:model DeviceEvent
type DeviceEvent struct {

	// The name of the DEVICE_EVENT. This typically corresponds to an attribute name of the device-handlerâ€™s capabilities.
	Attribute string `json:"attribute,omitempty"`

	// The name of the capability associated with the DEVICE_EVENT.
	Capability string `json:"capability,omitempty"`

	// The name of the component on the device that the event is associated with.
	ComponentID string `json:"componentId,omitempty"`

	// json map as defined by capability data schema
	Data interface{} `json:"data,omitempty"`

	// The ID of the device associated with the DEVICE_EVENT.
	DeviceID string `json:"deviceId,omitempty"`

	// The ID of the event.
	EventID string `json:"eventId,omitempty"`

	// The ID of the location in which the event was triggered.
	LocationID string `json:"locationId,omitempty"`

	// ID for what owns the device event. Works in tandem with `ownerType` as a composite identifier.
	OwnerID string `json:"ownerId,omitempty"`

	// owner type
	OwnerType EventOwnerType `json:"ownerType,omitempty"`

	// Whether or not the state of the device has changed as a result of the DEVICE_EVENT.
	StateChange bool `json:"stateChange,omitempty"`

	// The name of subscription that caused delivery.
	SubscriptionName string `json:"subscriptionName,omitempty"`

	// The value of the event. The type of the value is dependent on the capability's attribute type.
	//
	Value interface{} `json:"value,omitempty"`

	// The root level data type of the value field. The data types are representitive of standard JSON data types.
	//
	ValueType string `json:"valueType,omitempty"`
}

// Validate validates this device event
func (m *DeviceEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwnerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEvent) validateOwnerType(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerType) { // not required
		return nil
	}

	if err := m.OwnerType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ownerType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEvent) UnmarshalBinary(b []byte) error {
	var res DeviceEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
