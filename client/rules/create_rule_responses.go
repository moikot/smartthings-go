// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// CreateRuleReader is a Reader for the CreateRule structure.
type CreateRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateRuleOK creates a CreateRuleOK with default headers values
func NewCreateRuleOK() *CreateRuleOK {
	return &CreateRuleOK{}
}

/*CreateRuleOK handles this case with default header values.

The created rule
*/
type CreateRuleOK struct {
	Payload *models.Rule
}

func (o *CreateRuleOK) Error() string {
	return fmt.Sprintf("[POST /rules][%d] createRuleOK  %+v", 200, o.Payload)
}

func (o *CreateRuleOK) GetPayload() *models.Rule {
	return o.Payload
}

func (o *CreateRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleUnauthorized creates a CreateRuleUnauthorized with default headers values
func NewCreateRuleUnauthorized() *CreateRuleUnauthorized {
	return &CreateRuleUnauthorized{}
}

/*CreateRuleUnauthorized handles this case with default header values.

Not authenticated
*/
type CreateRuleUnauthorized struct {
}

func (o *CreateRuleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /rules][%d] createRuleUnauthorized ", 401)
}

func (o *CreateRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateRuleForbidden creates a CreateRuleForbidden with default headers values
func NewCreateRuleForbidden() *CreateRuleForbidden {
	return &CreateRuleForbidden{}
}

/*CreateRuleForbidden handles this case with default header values.

Not authorized
*/
type CreateRuleForbidden struct {
}

func (o *CreateRuleForbidden) Error() string {
	return fmt.Sprintf("[POST /rules][%d] createRuleForbidden ", 403)
}

func (o *CreateRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateRuleDefault creates a CreateRuleDefault with default headers values
func NewCreateRuleDefault(code int) *CreateRuleDefault {
	return &CreateRuleDefault{
		_statusCode: code,
	}
}

/*CreateRuleDefault handles this case with default header values.

Unexpected error
*/
type CreateRuleDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create rule default response
func (o *CreateRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateRuleDefault) Error() string {
	return fmt.Sprintf("[POST /rules][%d] createRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
