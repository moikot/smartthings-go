// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Capability capability
//
// swagger:model Capability
type Capability struct {

	// A mapping of attribute names to their definitions. All attribute names are lower camelcase.
	Attributes map[string]CapabilityAttribute `json:"attributes,omitempty"`

	// A mapping of command names to their definitions. All command names are lower camelcase.
	Commands map[string]CapabilityCommand `json:"commands,omitempty"`

	// A URL safe unique identifier for the capability.
	// Required: true
	ID *string `json:"id"`

	// An alphanumeric English language name for the capability.
	// Required: true
	Name *string `json:"name"`

	// The status of the capability.
	// * __proposed__ - The capability is currently under development / in review.  The capability definition may go through changes, some of which may currently not function properly.
	// * __live__ - The capability has been through review and the definition has been codified.  Once a definition transitions from proposed to live, it cannot be altered.
	// * __deprecated__ - The capability is marked for removal in future versions.  It should only be used during a short period of time to allow for existing integrations and automations to continue to work while the transition to a newer definition is made.
	// * __dead__ - A previously deprecated definition is now ready for removal.  Usage of the deprecated definition had dropped to a sufficiently low enough level to warrant removal.  The dead definition still exists but it can no longer be used or implemented by devices.
	//
	// Required: true
	// Enum: [proposed live deprecated dead]
	Status *string `json:"status"`

	// The version number of the capability.
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this capability
func (m *Capability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Capability) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for k := range m.Attributes {

		if err := validate.Required("attributes"+"."+k, "body", m.Attributes[k]); err != nil {
			return err
		}
		if val, ok := m.Attributes[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Capability) validateCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	for k := range m.Commands {

		if err := validate.Required("commands"+"."+k, "body", m.Commands[k]); err != nil {
			return err
		}
		if val, ok := m.Commands[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Capability) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Capability) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var capabilityTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["proposed","live","deprecated","dead"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityTypeStatusPropEnum = append(capabilityTypeStatusPropEnum, v)
	}
}

const (

	// CapabilityStatusProposed captures enum value "proposed"
	CapabilityStatusProposed string = "proposed"

	// CapabilityStatusLive captures enum value "live"
	CapabilityStatusLive string = "live"

	// CapabilityStatusDeprecated captures enum value "deprecated"
	CapabilityStatusDeprecated string = "deprecated"

	// CapabilityStatusDead captures enum value "dead"
	CapabilityStatusDead string = "dead"
)

// prop value enum
func (m *Capability) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, capabilityTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Capability) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Capability) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Capability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Capability) UnmarshalBinary(b []byte) error {
	var res Capability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
