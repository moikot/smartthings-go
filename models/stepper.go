// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stepper This display type creates a stepper which can trigger “increase” and “decrease” commands. The user must specify either a "command" field alone or "increase" / "decrease" fields for commands without an argument.
//
// swagger:model stepper
type Stepper struct {

	// command
	// Required: true
	Command *StepperCommand `json:"command"`

	// range
	// Required: true
	Range Range `json:"range"`

	// step
	// Required: true
	Step Step `json:"step"`

	// value
	Value Value `json:"value,omitempty"`

	// value type
	ValueType ValueType `json:"valueType,omitempty"`
}

// Validate validates this stepper
func (m *Stepper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stepper) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

func (m *Stepper) validateRange(formats strfmt.Registry) error {

	if err := validate.Required("range", "body", m.Range); err != nil {
		return err
	}

	if err := m.Range.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("range")
		}
		return err
	}

	return nil
}

func (m *Stepper) validateStep(formats strfmt.Registry) error {

	if err := m.Step.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("step")
		}
		return err
	}

	return nil
}

func (m *Stepper) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := m.Value.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("value")
		}
		return err
	}

	return nil
}

func (m *Stepper) validateValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueType) { // not required
		return nil
	}

	if err := m.ValueType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("valueType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stepper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stepper) UnmarshalBinary(b []byte) error {
	var res Stepper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StepperCommand stepper command
//
// swagger:model StepperCommand
type StepperCommand struct {

	// argument type
	ArgumentType ArgumentType `json:"argumentType,omitempty"`

	// To specify a command for "decrease" without an argument.
	Decrease string `json:"decrease,omitempty"`

	// To specify a command for "increase" without an argument.
	Increase string `json:"increase,omitempty"`

	// To specify a single command like "setValue(number)", use “command” field for the command name. If this field is specified then "increase" and "descrease" fields should not be specified. App will calculate desired value when user clicks "+" and "-" button in the UI based on the current value of "attribute" with specified "step".
	Name string `json:"name,omitempty"`
}

// Validate validates this stepper command
func (m *StepperCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgumentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StepperCommand) validateArgumentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ArgumentType) { // not required
		return nil
	}

	if err := m.ArgumentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("command" + "." + "argumentType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StepperCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StepperCommand) UnmarshalBinary(b []byte) error {
	var res StepperCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
