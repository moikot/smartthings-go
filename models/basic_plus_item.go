// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BasicPlusItem To specify the function of the device using the extended area of the dashboard card.
//
// swagger:model basicPlusItem
type BasicPlusItem struct {

	// Specify the type of UI component to use to display this action or state. The corresponding field must also be included. For example, if you specify "switch" here, you must also include the "switch" key and its object definition for this action or state.
	// Required: true
	// Enum: [stepper feature]
	DisplayType *string `json:"displayType"`

	// feature
	Feature Feature `json:"feature,omitempty"`

	// stepper
	Stepper *Stepper `json:"stepper,omitempty"`

	// visible condition
	VisibleCondition *VisibleCondition `json:"visibleCondition,omitempty"`
}

// Validate validates this basic plus item
func (m *BasicPlusItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepper(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibleCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var basicPlusItemTypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stepper","feature"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		basicPlusItemTypeDisplayTypePropEnum = append(basicPlusItemTypeDisplayTypePropEnum, v)
	}
}

const (

	// BasicPlusItemDisplayTypeStepper captures enum value "stepper"
	BasicPlusItemDisplayTypeStepper string = "stepper"

	// BasicPlusItemDisplayTypeFeature captures enum value "feature"
	BasicPlusItemDisplayTypeFeature string = "feature"
)

// prop value enum
func (m *BasicPlusItem) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, basicPlusItemTypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BasicPlusItem) validateDisplayType(formats strfmt.Registry) error {

	if err := validate.Required("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", *m.DisplayType); err != nil {
		return err
	}

	return nil
}

func (m *BasicPlusItem) validateFeature(formats strfmt.Registry) error {

	if swag.IsZero(m.Feature) { // not required
		return nil
	}

	if err := m.Feature.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("feature")
		}
		return err
	}

	return nil
}

func (m *BasicPlusItem) validateStepper(formats strfmt.Registry) error {

	if swag.IsZero(m.Stepper) { // not required
		return nil
	}

	if m.Stepper != nil {
		if err := m.Stepper.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stepper")
			}
			return err
		}
	}

	return nil
}

func (m *BasicPlusItem) validateVisibleCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.VisibleCondition) { // not required
		return nil
	}

	if m.VisibleCondition != nil {
		if err := m.VisibleCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibleCondition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BasicPlusItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BasicPlusItem) UnmarshalBinary(b []byte) error {
	var res BasicPlusItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
