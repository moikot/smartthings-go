// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommandStatus `ACCEPTED`: the command is processing but it's outcome is unknown
// `COMPLETED`: the command has successfully completed
// `FAILED`: the command has failed
//
//
// swagger:model CommandStatus
type CommandStatus string

const (

	// CommandStatusACCEPTED captures enum value "ACCEPTED"
	CommandStatusACCEPTED CommandStatus = "ACCEPTED"

	// CommandStatusCOMPLETED captures enum value "COMPLETED"
	CommandStatusCOMPLETED CommandStatus = "COMPLETED"

	// CommandStatusFAILED captures enum value "FAILED"
	CommandStatusFAILED CommandStatus = "FAILED"
)

// for schema
var commandStatusEnum []interface{}

func init() {
	var res []CommandStatus
	if err := json.Unmarshal([]byte(`["ACCEPTED","COMPLETED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commandStatusEnum = append(commandStatusEnum, v)
	}
}

func (m CommandStatus) validateCommandStatusEnum(path, location string, value CommandStatus) error {
	if err := validate.EnumCase(path, location, value, commandStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this command status
func (m CommandStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommandStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
