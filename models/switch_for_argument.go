// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SwitchForArgument switch for argument
//
// swagger:model switchForArgument
type SwitchForArgument struct {

	// name
	// Required: true
	Name ArgumentName `json:"name"`

	// Value for 'off'
	// Required: true
	Off *string `json:"off"`

	// Value for 'on'
	// Required: true
	On *string `json:"on"`
}

// Validate validates this switch for argument
func (m *SwitchForArgument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchForArgument) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *SwitchForArgument) validateOff(formats strfmt.Registry) error {

	if err := validate.Required("off", "body", m.Off); err != nil {
		return err
	}

	return nil
}

func (m *SwitchForArgument) validateOn(formats strfmt.Registry) error {

	if err := validate.Required("on", "body", m.On); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchForArgument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchForArgument) UnmarshalBinary(b []byte) error {
	var res SwitchForArgument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
