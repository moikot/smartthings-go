// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// GetRuleReader is a Reader for the GetRule structure.
type GetRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRuleOK creates a GetRuleOK with default headers values
func NewGetRuleOK() *GetRuleOK {
	return &GetRuleOK{}
}

/*GetRuleOK handles this case with default header values.

The rule
*/
type GetRuleOK struct {
	Payload *models.Rule
}

func (o *GetRuleOK) Error() string {
	return fmt.Sprintf("[GET /rules/{ruleId}][%d] getRuleOK  %+v", 200, o.Payload)
}

func (o *GetRuleOK) GetPayload() *models.Rule {
	return o.Payload
}

func (o *GetRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleUnauthorized creates a GetRuleUnauthorized with default headers values
func NewGetRuleUnauthorized() *GetRuleUnauthorized {
	return &GetRuleUnauthorized{}
}

/*GetRuleUnauthorized handles this case with default header values.

Not authenticated
*/
type GetRuleUnauthorized struct {
}

func (o *GetRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /rules/{ruleId}][%d] getRuleUnauthorized ", 401)
}

func (o *GetRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRuleForbidden creates a GetRuleForbidden with default headers values
func NewGetRuleForbidden() *GetRuleForbidden {
	return &GetRuleForbidden{}
}

/*GetRuleForbidden handles this case with default header values.

Not authorized or not found
*/
type GetRuleForbidden struct {
}

func (o *GetRuleForbidden) Error() string {
	return fmt.Sprintf("[GET /rules/{ruleId}][%d] getRuleForbidden ", 403)
}

func (o *GetRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRuleDefault creates a GetRuleDefault with default headers values
func NewGetRuleDefault(code int) *GetRuleDefault {
	return &GetRuleDefault{
		_statusCode: code,
	}
}

/*GetRuleDefault handles this case with default header values.

Unexpected error
*/
type GetRuleDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get rule default response
func (o *GetRuleDefault) Code() int {
	return o._statusCode
}

func (o *GetRuleDefault) Error() string {
	return fmt.Sprintf("[GET /rules/{ruleId}][%d] getRule default  %+v", o._statusCode, o.Payload)
}

func (o *GetRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
