// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NumberField This display type creates numberfield that the user enters a new value and that the new value is passed as an argument to the command
//
// swagger:model numberField
type NumberField struct {

	// argument type
	ArgumentType ArgumentType `json:"argumentType,omitempty"`

	// command
	// Required: true
	Command *string `json:"command"`

	// range
	Range Range `json:"range,omitempty"`

	// unit
	Unit Unit `json:"unit,omitempty"`

	// value
	Value Value `json:"value,omitempty"`

	// value type
	ValueType ValueType `json:"valueType,omitempty"`
}

// Validate validates this number field
func (m *NumberField) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgumentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NumberField) validateArgumentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ArgumentType) { // not required
		return nil
	}

	if err := m.ArgumentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("argumentType")
		}
		return err
	}

	return nil
}

func (m *NumberField) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

func (m *NumberField) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if err := m.Range.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("range")
		}
		return err
	}

	return nil
}

func (m *NumberField) validateUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	if err := m.Unit.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unit")
		}
		return err
	}

	return nil
}

func (m *NumberField) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := m.Value.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("value")
		}
		return err
	}

	return nil
}

func (m *NumberField) validateValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueType) { // not required
		return nil
	}

	if err := m.ValueType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("valueType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NumberField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NumberField) UnmarshalBinary(b []byte) error {
	var res NumberField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
