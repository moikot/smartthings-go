// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceConfigEntry device config entry
//
// swagger:model deviceConfigEntry
type DeviceConfigEntry struct {

	// capability
	// Required: true
	Capability *string `json:"capability"`

	// component
	// Required: true
	Component *string `json:"component"`

	// A format which is applied some operations(add / replace / remove) from the rfc6902(https://tools.ietf.org/html/rfc6902#section-4). Please note that array in the patch is sequentially processed.
	Patch []*PatchItem `json:"patch"`

	// A list of valid values for the command argument or attribute that can override those defined by the alternatives provided in the capability presentation.
	Values []*CapabilityValue `json:"values"`

	// version
	Version Version `json:"version,omitempty"`

	// visible condition
	VisibleCondition *VisibleCondition `json:"visibleCondition,omitempty"`
}

// Validate validates this device config entry
func (m *DeviceConfigEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibleCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfigEntry) validateCapability(formats strfmt.Registry) error {

	if err := validate.Required("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigEntry) validateComponent(formats strfmt.Registry) error {

	if err := validate.Required("component", "body", m.Component); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigEntry) validatePatch(formats strfmt.Registry) error {

	if swag.IsZero(m.Patch) { // not required
		return nil
	}

	for i := 0; i < len(m.Patch); i++ {
		if swag.IsZero(m.Patch[i]) { // not required
			continue
		}

		if m.Patch[i] != nil {
			if err := m.Patch[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigEntry) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigEntry) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := m.Version.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("version")
		}
		return err
	}

	return nil
}

func (m *DeviceConfigEntry) validateVisibleCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.VisibleCondition) { // not required
		return nil
	}

	if m.VisibleCondition != nil {
		if err := m.VisibleCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibleCondition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceConfigEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceConfigEntry) UnmarshalBinary(b []byte) error {
	var res DeviceConfigEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
