// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DthDeviceDetails dth device details
//
// swagger:model DthDeviceDetails
type DthDeviceDetails struct {

	// True if the device setup has been completed so the device is ready to use.
	// Required: true
	CompletedSetup *bool `json:"completedSetup"`

	// The device network type.
	DeviceNetworkType string `json:"deviceNetworkType,omitempty"`

	// The identifier for the device's DeviceType.
	// Required: true
	DeviceTypeID *string `json:"deviceTypeId"`

	// The name for the device's DeviceType.
	// Required: true
	DeviceTypeName *string `json:"deviceTypeName"`

	// True if the device is executing locally on the hub
	ExecutingLocally bool `json:"executingLocally,omitempty"`

	// The hub that the device is connected to.
	HubID string `json:"hubId,omitempty"`

	// The ID of the installed groovy application
	InstalledGroovyAppID string `json:"installedGroovyAppId,omitempty"`

	// network security level
	NetworkSecurityLevel DeviceNetworkSecurityLevel `json:"networkSecurityLevel,omitempty"`
}

// Validate validates this dth device details
func (m *DthDeviceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedSetup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceTypeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSecurityLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DthDeviceDetails) validateCompletedSetup(formats strfmt.Registry) error {

	if err := validate.Required("completedSetup", "body", m.CompletedSetup); err != nil {
		return err
	}

	return nil
}

func (m *DthDeviceDetails) validateDeviceTypeID(formats strfmt.Registry) error {

	if err := validate.Required("deviceTypeId", "body", m.DeviceTypeID); err != nil {
		return err
	}

	return nil
}

func (m *DthDeviceDetails) validateDeviceTypeName(formats strfmt.Registry) error {

	if err := validate.Required("deviceTypeName", "body", m.DeviceTypeName); err != nil {
		return err
	}

	return nil
}

func (m *DthDeviceDetails) validateNetworkSecurityLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkSecurityLevel) { // not required
		return nil
	}

	if err := m.NetworkSecurityLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("networkSecurityLevel")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DthDeviceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DthDeviceDetails) UnmarshalBinary(b []byte) error {
	var res DthDeviceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
