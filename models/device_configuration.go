// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceConfiguration device configuration
//
// swagger:model deviceConfiguration
type DeviceConfiguration struct {

	// automation
	Automation *DeviceConfigurationAutomation `json:"automation,omitempty"`

	// dashboard
	Dashboard *DeviceConfigurationDashboard `json:"dashboard,omitempty"`

	// detail view
	DetailView []*DeviceConfigEntry `json:"detailView"`

	// dp info
	DpInfo DpInfo `json:"dpInfo,omitempty"`

	// icon Url
	IconURL IconURL `json:"iconUrl,omitempty"`

	// mnmn
	// Required: true
	Mnmn Mnmn `json:"mnmn"`

	// type
	// Enum: [dth profile]
	Type *string `json:"type,omitempty"`

	// vid
	// Required: true
	Vid Vid `json:"vid"`
}

// Validate validates this device configuration
func (m *DeviceConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDpInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMnmn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfiguration) validateAutomation(formats strfmt.Registry) error {

	if swag.IsZero(m.Automation) { // not required
		return nil
	}

	if m.Automation != nil {
		if err := m.Automation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automation")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfiguration) validateDashboard(formats strfmt.Registry) error {

	if swag.IsZero(m.Dashboard) { // not required
		return nil
	}

	if m.Dashboard != nil {
		if err := m.Dashboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfiguration) validateDetailView(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailView) { // not required
		return nil
	}

	for i := 0; i < len(m.DetailView); i++ {
		if swag.IsZero(m.DetailView[i]) { // not required
			continue
		}

		if m.DetailView[i] != nil {
			if err := m.DetailView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("detailView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfiguration) validateDpInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.DpInfo) { // not required
		return nil
	}

	if err := m.DpInfo.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dpInfo")
		}
		return err
	}

	return nil
}

func (m *DeviceConfiguration) validateIconURL(formats strfmt.Registry) error {

	if swag.IsZero(m.IconURL) { // not required
		return nil
	}

	if err := m.IconURL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("iconUrl")
		}
		return err
	}

	return nil
}

func (m *DeviceConfiguration) validateMnmn(formats strfmt.Registry) error {

	if err := m.Mnmn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mnmn")
		}
		return err
	}

	return nil
}

var deviceConfigurationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dth","profile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceConfigurationTypeTypePropEnum = append(deviceConfigurationTypeTypePropEnum, v)
	}
}

const (

	// DeviceConfigurationTypeDth captures enum value "dth"
	DeviceConfigurationTypeDth string = "dth"

	// DeviceConfigurationTypeProfile captures enum value "profile"
	DeviceConfigurationTypeProfile string = "profile"
)

// prop value enum
func (m *DeviceConfiguration) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceConfigurationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceConfiguration) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfiguration) validateVid(formats strfmt.Registry) error {

	if err := m.Vid.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vid")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceConfiguration) UnmarshalBinary(b []byte) error {
	var res DeviceConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceConfigurationAutomation device configuration automation
//
// swagger:model DeviceConfigurationAutomation
type DeviceConfigurationAutomation struct {

	// actions
	Actions []*ExcludedDeviceActionConfigEntry `json:"actions"`

	// conditions
	Conditions []*ExcludedDeviceConditionConfigEntry `json:"conditions"`
}

// Validate validates this device configuration automation
func (m *DeviceConfigurationAutomation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfigurationAutomation) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("automation" + "." + "actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigurationAutomation) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("automation" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceConfigurationAutomation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceConfigurationAutomation) UnmarshalBinary(b []byte) error {
	var res DeviceConfigurationAutomation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceConfigurationDashboard device configuration dashboard
//
// swagger:model DeviceConfigurationDashboard
type DeviceConfigurationDashboard struct {

	// actions
	Actions []*DeviceConfigEntry `json:"actions"`

	// states
	States []*DeviceConfigEntry `json:"states"`
}

// Validate validates this device configuration dashboard
func (m *DeviceConfigurationDashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfigurationDashboard) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dashboard" + "." + "actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigurationDashboard) validateStates(formats strfmt.Registry) error {

	if swag.IsZero(m.States) { // not required
		return nil
	}

	for i := 0; i < len(m.States); i++ {
		if swag.IsZero(m.States[i]) { // not required
			continue
		}

		if m.States[i] != nil {
			if err := m.States[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dashboard" + "." + "states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceConfigurationDashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceConfigurationDashboard) UnmarshalBinary(b []byte) error {
	var res DeviceConfigurationDashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
