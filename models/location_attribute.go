// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LocationAttribute location attribute
//
// swagger:model LocationAttribute
type LocationAttribute string

const (

	// LocationAttributeFineDust captures enum value "FineDust"
	LocationAttributeFineDust LocationAttribute = "FineDust"

	// LocationAttributeFineDustIndex captures enum value "FineDustIndex"
	LocationAttributeFineDustIndex LocationAttribute = "FineDustIndex"

	// LocationAttributeHumidity captures enum value "Humidity"
	LocationAttributeHumidity LocationAttribute = "Humidity"

	// LocationAttributeMode captures enum value "Mode"
	LocationAttributeMode LocationAttribute = "Mode"

	// LocationAttributeSecurity captures enum value "Security"
	LocationAttributeSecurity LocationAttribute = "Security"

	// LocationAttributeTemperature captures enum value "Temperature"
	LocationAttributeTemperature LocationAttribute = "Temperature"

	// LocationAttributeUltraFineDust captures enum value "UltraFineDust"
	LocationAttributeUltraFineDust LocationAttribute = "UltraFineDust"

	// LocationAttributeUltraFineDustIndex captures enum value "UltraFineDustIndex"
	LocationAttributeUltraFineDustIndex LocationAttribute = "UltraFineDustIndex"

	// LocationAttributeWeather captures enum value "Weather"
	LocationAttributeWeather LocationAttribute = "Weather"
)

// for schema
var locationAttributeEnum []interface{}

func init() {
	var res []LocationAttribute
	if err := json.Unmarshal([]byte(`["FineDust","FineDustIndex","Humidity","Mode","Security","Temperature","UltraFineDust","UltraFineDustIndex","Weather"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		locationAttributeEnum = append(locationAttributeEnum, v)
	}
}

func (m LocationAttribute) validateLocationAttributeEnum(path, location string, value LocationAttribute) error {
	if err := validate.EnumCase(path, location, value, locationAttributeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this location attribute
func (m LocationAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLocationAttributeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
