// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExcludedActionItem excluded action item
//
// swagger:model excludedActionItem
type ExcludedActionItem struct {

	// exclude
	// Required: true
	Exclude []*ExcludedActionItemExcludeItems0 `json:"exclude"`

	// To express that a specific value is selected
	Value interface{} `json:"value,omitempty"`
}

// Validate validates this excluded action item
func (m *ExcludedActionItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExclude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExcludedActionItem) validateExclude(formats strfmt.Registry) error {

	if err := validate.Required("exclude", "body", m.Exclude); err != nil {
		return err
	}

	for i := 0; i < len(m.Exclude); i++ {
		if swag.IsZero(m.Exclude[i]) { // not required
			continue
		}

		if m.Exclude[i] != nil {
			if err := m.Exclude[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclude" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExcludedActionItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExcludedActionItem) UnmarshalBinary(b []byte) error {
	var res ExcludedActionItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExcludedActionItemExcludeItems0 excluded action item exclude items0
//
// swagger:model ExcludedActionItemExcludeItems0
type ExcludedActionItemExcludeItems0 struct {

	// capability
	// Required: true
	Capability *string `json:"capability"`

	// commands
	Commands ExcludeItemsCommands `json:"commands,omitempty"`

	// To specify target component to exclude, if it's omitted then all components with this capability will be excluded
	Component string `json:"component,omitempty"`

	// version
	Version *int64 `json:"version,omitempty"`
}

// Validate validates this excluded action item exclude items0
func (m *ExcludedActionItemExcludeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExcludedActionItemExcludeItems0) validateCapability(formats strfmt.Registry) error {

	if err := validate.Required("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *ExcludedActionItemExcludeItems0) validateCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	if err := m.Commands.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("commands")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExcludedActionItemExcludeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExcludedActionItemExcludeItems0) UnmarshalBinary(b []byte) error {
	var res ExcludedActionItemExcludeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
