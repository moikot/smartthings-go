// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// NewUpdateRuleParams creates a new UpdateRuleParams object
// with the default values initialized.
func NewUpdateRuleParams() *UpdateRuleParams {
	var ()
	return &UpdateRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateRuleParamsWithTimeout creates a new UpdateRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateRuleParamsWithTimeout(timeout time.Duration) *UpdateRuleParams {
	var ()
	return &UpdateRuleParams{

		timeout: timeout,
	}
}

// NewUpdateRuleParamsWithContext creates a new UpdateRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateRuleParamsWithContext(ctx context.Context) *UpdateRuleParams {
	var ()
	return &UpdateRuleParams{

		Context: ctx,
	}
}

// NewUpdateRuleParamsWithHTTPClient creates a new UpdateRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateRuleParamsWithHTTPClient(client *http.Client) *UpdateRuleParams {
	var ()
	return &UpdateRuleParams{
		HTTPClient: client,
	}
}

/*UpdateRuleParams contains all the parameters to send to the API endpoint
for the update rule operation typically these are written to a http.Request
*/
type UpdateRuleParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*LocationID
	  The ID of the location in which to update the rule in.

	*/
	LocationID string
	/*Request
	  The rule to be updated.

	*/
	Request *models.RuleRequest
	/*RuleID
	  The rule ID

	*/
	RuleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update rule params
func (o *UpdateRuleParams) WithTimeout(timeout time.Duration) *UpdateRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update rule params
func (o *UpdateRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update rule params
func (o *UpdateRuleParams) WithContext(ctx context.Context) *UpdateRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update rule params
func (o *UpdateRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update rule params
func (o *UpdateRuleParams) WithHTTPClient(client *http.Client) *UpdateRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update rule params
func (o *UpdateRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the update rule params
func (o *UpdateRuleParams) WithAuthorization(authorization string) *UpdateRuleParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the update rule params
func (o *UpdateRuleParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithLocationID adds the locationID to the update rule params
func (o *UpdateRuleParams) WithLocationID(locationID string) *UpdateRuleParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the update rule params
func (o *UpdateRuleParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithRequest adds the request to the update rule params
func (o *UpdateRuleParams) WithRequest(request *models.RuleRequest) *UpdateRuleParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the update rule params
func (o *UpdateRuleParams) SetRequest(request *models.RuleRequest) {
	o.Request = request
}

// WithRuleID adds the ruleID to the update rule params
func (o *UpdateRuleParams) WithRuleID(ruleID string) *UpdateRuleParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the update rule params
func (o *UpdateRuleParams) SetRuleID(ruleID string) {
	o.RuleID = ruleID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// query param locationId
	qrLocationID := o.LocationID
	qLocationID := qrLocationID
	if qLocationID != "" {
		if err := r.SetQueryParam("locationId", qLocationID); err != nil {
			return err
		}
	}

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	// path param ruleId
	if err := r.SetPathParam("ruleId", o.RuleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
