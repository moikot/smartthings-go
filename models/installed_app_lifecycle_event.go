// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InstalledAppLifecycleEvent An Installed App Lifecycle Event.
//
// swagger:model InstalledAppLifecycleEvent
type InstalledAppLifecycleEvent struct {

	// The ID of the application.
	AppID string `json:"appId,omitempty"`

	// create
	Create InstalledAppLifecycleCreate `json:"create,omitempty"`

	// delete
	Delete InstalledAppLifecycleDelete `json:"delete,omitempty"`

	// error
	Error *InstalledAppLifecycleError `json:"error,omitempty"`

	// The id of the event.
	EventID string `json:"eventId,omitempty"`

	// install
	Install InstalledAppLifecycleInstall `json:"install,omitempty"`

	// The ID of the installed application.
	InstalledAppID string `json:"installedAppId,omitempty"`

	// lifecycle
	Lifecycle InstalledAppLifecycle `json:"lifecycle,omitempty"`

	// The ID of the location in which the event was triggered.
	LocationID string `json:"locationId,omitempty"`

	// other
	Other InstalledAppLifecycleOther `json:"other,omitempty"`

	// update
	Update InstalledAppLifecycleUpdate `json:"update,omitempty"`
}

// Validate validates this installed app lifecycle event
func (m *InstalledAppLifecycleEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstalledAppLifecycleEvent) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *InstalledAppLifecycleEvent) validateLifecycle(formats strfmt.Registry) error {

	if swag.IsZero(m.Lifecycle) { // not required
		return nil
	}

	if err := m.Lifecycle.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lifecycle")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstalledAppLifecycleEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstalledAppLifecycleEvent) UnmarshalBinary(b []byte) error {
	var res InstalledAppLifecycleEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
