// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Condition condition
//
// swagger:model Condition
type Condition struct {

	// and
	And []*Condition `json:"and"`

	// between
	Between *BetweenCondition `json:"between,omitempty"`

	// equals
	Equals *EqualsCondition `json:"equals,omitempty"`

	// greater than
	GreaterThan *GreaterThanCondition `json:"greaterThan,omitempty"`

	// greater than or equals
	GreaterThanOrEquals *GreaterThanOrEqualsCondition `json:"greaterThanOrEquals,omitempty"`

	// less than
	LessThan *LessThanCondition `json:"lessThan,omitempty"`

	// less than or equals
	LessThanOrEquals *LessThanOrEqualsCondition `json:"lessThanOrEquals,omitempty"`

	// not
	Not *Condition `json:"not,omitempty"`

	// or
	Or []*Condition `json:"or"`
}

// Validate validates this condition
func (m *Condition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetween(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGreaterThan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGreaterThanOrEquals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLessThan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLessThanOrEquals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Condition) validateAnd(formats strfmt.Registry) error {

	if swag.IsZero(m.And) { // not required
		return nil
	}

	for i := 0; i < len(m.And); i++ {
		if swag.IsZero(m.And[i]) { // not required
			continue
		}

		if m.And[i] != nil {
			if err := m.And[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("and" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Condition) validateBetween(formats strfmt.Registry) error {

	if swag.IsZero(m.Between) { // not required
		return nil
	}

	if m.Between != nil {
		if err := m.Between.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("between")
			}
			return err
		}
	}

	return nil
}

func (m *Condition) validateEquals(formats strfmt.Registry) error {

	if swag.IsZero(m.Equals) { // not required
		return nil
	}

	if m.Equals != nil {
		if err := m.Equals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("equals")
			}
			return err
		}
	}

	return nil
}

func (m *Condition) validateGreaterThan(formats strfmt.Registry) error {

	if swag.IsZero(m.GreaterThan) { // not required
		return nil
	}

	if m.GreaterThan != nil {
		if err := m.GreaterThan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greaterThan")
			}
			return err
		}
	}

	return nil
}

func (m *Condition) validateGreaterThanOrEquals(formats strfmt.Registry) error {

	if swag.IsZero(m.GreaterThanOrEquals) { // not required
		return nil
	}

	if m.GreaterThanOrEquals != nil {
		if err := m.GreaterThanOrEquals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greaterThanOrEquals")
			}
			return err
		}
	}

	return nil
}

func (m *Condition) validateLessThan(formats strfmt.Registry) error {

	if swag.IsZero(m.LessThan) { // not required
		return nil
	}

	if m.LessThan != nil {
		if err := m.LessThan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lessThan")
			}
			return err
		}
	}

	return nil
}

func (m *Condition) validateLessThanOrEquals(formats strfmt.Registry) error {

	if swag.IsZero(m.LessThanOrEquals) { // not required
		return nil
	}

	if m.LessThanOrEquals != nil {
		if err := m.LessThanOrEquals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lessThanOrEquals")
			}
			return err
		}
	}

	return nil
}

func (m *Condition) validateNot(formats strfmt.Registry) error {

	if swag.IsZero(m.Not) { // not required
		return nil
	}

	if m.Not != nil {
		if err := m.Not.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("not")
			}
			return err
		}
	}

	return nil
}

func (m *Condition) validateOr(formats strfmt.Registry) error {

	if swag.IsZero(m.Or) { // not required
		return nil
	}

	for i := 0; i < len(m.Or); i++ {
		if swag.IsZero(m.Or[i]) { // not required
			continue
		}

		if m.Or[i] != nil {
			if err := m.Or[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("or" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Condition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Condition) UnmarshalBinary(b []byte) error {
	var res Condition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
