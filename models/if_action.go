// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IfAction if action
//
// swagger:model IfAction
type IfAction struct {
	Condition

	// else
	Else []*Action `json:"else"`

	// The sequence in which the actions are to be executed
	Sequence *IfActionSequence `json:"sequence,omitempty"`

	// then
	Then []*Action `json:"then"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IfAction) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Condition
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Condition = aO0

	// AO1
	var dataAO1 struct {
		Else []*Action `json:"else"`

		Sequence *IfActionSequence `json:"sequence,omitempty"`

		Then []*Action `json:"then"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Else = dataAO1.Else

	m.Sequence = dataAO1.Sequence

	m.Then = dataAO1.Then

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IfAction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Condition)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Else []*Action `json:"else"`

		Sequence *IfActionSequence `json:"sequence,omitempty"`

		Then []*Action `json:"then"`
	}

	dataAO1.Else = m.Else

	dataAO1.Sequence = m.Sequence

	dataAO1.Then = m.Then

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this if action
func (m *IfAction) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Condition
	if err := m.Condition.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IfAction) validateElse(formats strfmt.Registry) error {

	if swag.IsZero(m.Else) { // not required
		return nil
	}

	for i := 0; i < len(m.Else); i++ {
		if swag.IsZero(m.Else[i]) { // not required
			continue
		}

		if m.Else[i] != nil {
			if err := m.Else[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("else" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IfAction) validateSequence(formats strfmt.Registry) error {

	if swag.IsZero(m.Sequence) { // not required
		return nil
	}

	if m.Sequence != nil {
		if err := m.Sequence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequence")
			}
			return err
		}
	}

	return nil
}

func (m *IfAction) validateThen(formats strfmt.Registry) error {

	if swag.IsZero(m.Then) { // not required
		return nil
	}

	for i := 0; i < len(m.Then); i++ {
		if swag.IsZero(m.Then[i]) { // not required
			continue
		}

		if m.Then[i] != nil {
			if err := m.Then[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("then" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IfAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IfAction) UnmarshalBinary(b []byte) error {
	var res IfAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
