// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LocaleVariables Message template variables associated with a certain locale.
//
// swagger:model LocaleVariables
type LocaleVariables struct {

	// locale tag
	// Required: true
	LocaleTag LocaleTag `json:"localeTag"`

	// A map<string,string> with the key representing the variable name, and the value representing the verbiage
	// to be replaced in template string.
	//
	Variables map[string]string `json:"variables,omitempty"`
}

// Validate validates this locale variables
func (m *LocaleVariables) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocaleTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocaleVariables) validateLocaleTag(formats strfmt.Registry) error {

	if err := m.LocaleTag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("localeTag")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocaleVariables) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocaleVariables) UnmarshalBinary(b []byte) error {
	var res LocaleVariables
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
