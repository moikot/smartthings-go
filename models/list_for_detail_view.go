// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListForDetailView To specify available values shown in a drop-down UI. User can select one of the value among the list items
//
// swagger:model listForDetailView
type ListForDetailView struct {

	// command
	Command *ListForDetailViewCommand `json:"command,omitempty"`

	// state
	State *ListForDetailViewState `json:"state,omitempty"`
}

// Validate validates this list for detail view
func (m *ListForDetailView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListForDetailView) validateCommand(formats strfmt.Registry) error {

	if swag.IsZero(m.Command) { // not required
		return nil
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

func (m *ListForDetailView) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListForDetailView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListForDetailView) UnmarshalBinary(b []byte) error {
	var res ListForDetailView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListForDetailViewCommand list for detail view command
//
// swagger:model ListForDetailViewCommand
type ListForDetailViewCommand struct {

	// alternatives
	// Required: true
	Alternatives Alternatives `json:"alternatives"`

	// name refers to command name and key of the alternatives is the argument of the command
	Name string `json:"name,omitempty"`

	// supported values
	SupportedValues SupportedValues `json:"supportedValues,omitempty"`
}

// Validate validates this list for detail view command
func (m *ListForDetailViewCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternatives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListForDetailViewCommand) validateAlternatives(formats strfmt.Registry) error {

	if err := validate.Required("command"+"."+"alternatives", "body", m.Alternatives); err != nil {
		return err
	}

	if err := m.Alternatives.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("command" + "." + "alternatives")
		}
		return err
	}

	return nil
}

func (m *ListForDetailViewCommand) validateSupportedValues(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedValues) { // not required
		return nil
	}

	if err := m.SupportedValues.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("command" + "." + "supportedValues")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListForDetailViewCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListForDetailViewCommand) UnmarshalBinary(b []byte) error {
	var res ListForDetailViewCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListForDetailViewState list for detail view state
//
// swagger:model ListForDetailViewState
type ListForDetailViewState struct {

	// alternatives
	// Required: true
	Alternatives interface{} `json:"alternatives"`

	// value
	// Required: true
	Value Value `json:"value"`
}

// Validate validates this list for detail view state
func (m *ListForDetailViewState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternatives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListForDetailViewState) validateAlternatives(formats strfmt.Registry) error {

	if err := validate.Required("state"+"."+"alternatives", "body", m.Alternatives); err != nil {
		return err
	}

	return nil
}

func (m *ListForDetailViewState) validateValue(formats strfmt.Registry) error {

	if err := m.Value.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state" + "." + "value")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListForDetailViewState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListForDetailViewState) UnmarshalBinary(b []byte) error {
	var res ListForDetailViewState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
