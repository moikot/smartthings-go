// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CapabilityPresentation capability presentation
//
// swagger:model capabilityPresentation
type CapabilityPresentation struct {

	// id
	ID string `json:"id,omitempty"`

	// version
	Version Version `json:"version,omitempty"`

	CapabilityPresentationForPUT
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CapabilityPresentation) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"id,omitempty"`

		Version Version `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ID = dataAO0.ID

	m.Version = dataAO0.Version

	// AO1
	var aO1 CapabilityPresentationForPUT
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.CapabilityPresentationForPUT = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CapabilityPresentation) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"id,omitempty"`

		Version Version `json:"version,omitempty"`
	}

	dataAO0.ID = m.ID

	dataAO0.Version = m.Version

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.CapabilityPresentationForPUT)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this capability presentation
func (m *CapabilityPresentation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CapabilityPresentationForPUT
	if err := m.CapabilityPresentationForPUT.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilityPresentation) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := m.Version.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("version")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityPresentation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityPresentation) UnmarshalBinary(b []byte) error {
	var res CapabilityPresentation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
