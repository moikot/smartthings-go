// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CapabilityPresentationForPUT The capability presentation describes how the capability will look in the app, what actions and states are shown, as well as how conditions and actions are expressed in an automation.
//
// swagger:model capabilityPresentationForPUT
type CapabilityPresentationForPUT struct {

	// automation
	Automation *AutomationForCapability `json:"automation,omitempty"`

	// dashboard
	Dashboard *DashboardForCapability `json:"dashboard,omitempty"`

	// detail view
	DetailView DetailViewForCapability `json:"detailView,omitempty"`
}

// Validate validates this capability presentation for p u t
func (m *CapabilityPresentationForPUT) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilityPresentationForPUT) validateAutomation(formats strfmt.Registry) error {

	if swag.IsZero(m.Automation) { // not required
		return nil
	}

	if m.Automation != nil {
		if err := m.Automation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automation")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilityPresentationForPUT) validateDashboard(formats strfmt.Registry) error {

	if swag.IsZero(m.Dashboard) { // not required
		return nil
	}

	if m.Dashboard != nil {
		if err := m.Dashboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilityPresentationForPUT) validateDetailView(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailView) { // not required
		return nil
	}

	if err := m.DetailView.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("detailView")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityPresentationForPUT) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityPresentationForPUT) UnmarshalBinary(b []byte) error {
	var res CapabilityPresentationForPUT
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
