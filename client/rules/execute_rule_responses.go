// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// ExecuteRuleReader is a Reader for the ExecuteRule structure.
type ExecuteRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExecuteRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewExecuteRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExecuteRuleOK creates a ExecuteRuleOK with default headers values
func NewExecuteRuleOK() *ExecuteRuleOK {
	return &ExecuteRuleOK{}
}

/*ExecuteRuleOK handles this case with default header values.

Successfully Executed
*/
type ExecuteRuleOK struct {
	Payload *models.RuleExecutionResponse
}

func (o *ExecuteRuleOK) Error() string {
	return fmt.Sprintf("[POST /rules/execute/{ruleId}][%d] executeRuleOK  %+v", 200, o.Payload)
}

func (o *ExecuteRuleOK) GetPayload() *models.RuleExecutionResponse {
	return o.Payload
}

func (o *ExecuteRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuleExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteRuleUnauthorized creates a ExecuteRuleUnauthorized with default headers values
func NewExecuteRuleUnauthorized() *ExecuteRuleUnauthorized {
	return &ExecuteRuleUnauthorized{}
}

/*ExecuteRuleUnauthorized handles this case with default header values.

Not authenticated
*/
type ExecuteRuleUnauthorized struct {
}

func (o *ExecuteRuleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /rules/execute/{ruleId}][%d] executeRuleUnauthorized ", 401)
}

func (o *ExecuteRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecuteRuleForbidden creates a ExecuteRuleForbidden with default headers values
func NewExecuteRuleForbidden() *ExecuteRuleForbidden {
	return &ExecuteRuleForbidden{}
}

/*ExecuteRuleForbidden handles this case with default header values.

Not authorized or not found
*/
type ExecuteRuleForbidden struct {
}

func (o *ExecuteRuleForbidden) Error() string {
	return fmt.Sprintf("[POST /rules/execute/{ruleId}][%d] executeRuleForbidden ", 403)
}

func (o *ExecuteRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecuteRuleDefault creates a ExecuteRuleDefault with default headers values
func NewExecuteRuleDefault(code int) *ExecuteRuleDefault {
	return &ExecuteRuleDefault{
		_statusCode: code,
	}
}

/*ExecuteRuleDefault handles this case with default header values.

Unexpected error
*/
type ExecuteRuleDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the execute rule default response
func (o *ExecuteRuleDefault) Code() int {
	return o._statusCode
}

func (o *ExecuteRuleDefault) Error() string {
	return fmt.Sprintf("[POST /rules/execute/{ruleId}][%d] executeRule default  %+v", o._statusCode, o.Payload)
}

func (o *ExecuteRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExecuteRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
