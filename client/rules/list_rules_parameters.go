// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRulesParams creates a new ListRulesParams object
// with the default values initialized.
func NewListRulesParams() *ListRulesParams {
	var ()
	return &ListRulesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListRulesParamsWithTimeout creates a new ListRulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListRulesParamsWithTimeout(timeout time.Duration) *ListRulesParams {
	var ()
	return &ListRulesParams{

		timeout: timeout,
	}
}

// NewListRulesParamsWithContext creates a new ListRulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListRulesParamsWithContext(ctx context.Context) *ListRulesParams {
	var ()
	return &ListRulesParams{

		Context: ctx,
	}
}

// NewListRulesParamsWithHTTPClient creates a new ListRulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListRulesParamsWithHTTPClient(client *http.Client) *ListRulesParams {
	var ()
	return &ListRulesParams{
		HTTPClient: client,
	}
}

/*ListRulesParams contains all the parameters to send to the API endpoint
for the list rules operation typically these are written to a http.Request
*/
type ListRulesParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*LocationID
	  The ID of the location to list the rules for.

	*/
	LocationID string
	/*Max
	  The max number of rules to fetch

	*/
	Max *int64
	/*Offset
	  The start index of rules to fetch

	*/
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list rules params
func (o *ListRulesParams) WithTimeout(timeout time.Duration) *ListRulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list rules params
func (o *ListRulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list rules params
func (o *ListRulesParams) WithContext(ctx context.Context) *ListRulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list rules params
func (o *ListRulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list rules params
func (o *ListRulesParams) WithHTTPClient(client *http.Client) *ListRulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list rules params
func (o *ListRulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the list rules params
func (o *ListRulesParams) WithAuthorization(authorization string) *ListRulesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the list rules params
func (o *ListRulesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithLocationID adds the locationID to the list rules params
func (o *ListRulesParams) WithLocationID(locationID string) *ListRulesParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list rules params
func (o *ListRulesParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithMax adds the max to the list rules params
func (o *ListRulesParams) WithMax(max *int64) *ListRulesParams {
	o.SetMax(max)
	return o
}

// SetMax adds the max to the list rules params
func (o *ListRulesParams) SetMax(max *int64) {
	o.Max = max
}

// WithOffset adds the offset to the list rules params
func (o *ListRulesParams) WithOffset(offset *int64) *ListRulesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list rules params
func (o *ListRulesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *ListRulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// query param locationId
	qrLocationID := o.LocationID
	qLocationID := qrLocationID
	if qLocationID != "" {
		if err := r.SetQueryParam("locationId", qLocationID); err != nil {
			return err
		}
	}

	if o.Max != nil {

		// query param max
		var qrMax int64
		if o.Max != nil {
			qrMax = *o.Max
		}
		qMax := swag.FormatInt64(qrMax)
		if qMax != "" {
			if err := r.SetQueryParam("max", qMax); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
