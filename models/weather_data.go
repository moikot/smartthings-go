// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WeatherData Weather data
//
//
// swagger:model WeatherData
type WeatherData struct {

	// Cloud ceiling in meters
	CloudCeilingInM int64 `json:"cloudCeilingInM,omitempty"`

	// The phrase of the cloud cover
	CloudCoverPhrase string `json:"cloudCoverPhrase,omitempty"`

	// condition phrase long
	ConditionPhraseLong string `json:"conditionPhraseLong,omitempty"`

	// condition state
	// Enum: [UNKNOWN CLEAR SNOW RAIN]
	ConditionState string `json:"conditionState,omitempty"`

	// Relative Humidity Percentage
	RelativeHumidityInPercent int64 `json:"relativeHumidityInPercent,omitempty"`

	// sunrise date
	SunriseDate string `json:"sunriseDate,omitempty"`

	// sunset date
	SunsetDate string `json:"sunsetDate,omitempty"`

	// Feels-like temperature in degrees celsius
	TemperatureFeelsLikeInC float64 `json:"temperatureFeelsLikeInC,omitempty"`

	// Temperature in degrees celsius
	TemperatureInC float64 `json:"temperatureInC,omitempty"`

	// uv description
	UvDescription string `json:"uvDescription,omitempty"`

	// uv index
	UvIndex int64 `json:"uvIndex,omitempty"`

	// visibility in km
	VisibilityInKm float64 `json:"visibilityInKm,omitempty"`

	// wind direction cardinal
	WindDirectionCardinal string `json:"windDirectionCardinal,omitempty"`

	// wind direction in degrees
	WindDirectionInDegrees int64 `json:"windDirectionInDegrees,omitempty"`

	// wind gust in kmph
	WindGustInKmph int64 `json:"windGustInKmph,omitempty"`

	// wind speed in kmph
	WindSpeedInKmph int64 `json:"windSpeedInKmph,omitempty"`
}

// Validate validates this weather data
func (m *WeatherData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var weatherDataTypeConditionStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","CLEAR","SNOW","RAIN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		weatherDataTypeConditionStatePropEnum = append(weatherDataTypeConditionStatePropEnum, v)
	}
}

const (

	// WeatherDataConditionStateUNKNOWN captures enum value "UNKNOWN"
	WeatherDataConditionStateUNKNOWN string = "UNKNOWN"

	// WeatherDataConditionStateCLEAR captures enum value "CLEAR"
	WeatherDataConditionStateCLEAR string = "CLEAR"

	// WeatherDataConditionStateSNOW captures enum value "SNOW"
	WeatherDataConditionStateSNOW string = "SNOW"

	// WeatherDataConditionStateRAIN captures enum value "RAIN"
	WeatherDataConditionStateRAIN string = "RAIN"
)

// prop value enum
func (m *WeatherData) validateConditionStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, weatherDataTypeConditionStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WeatherData) validateConditionState(formats strfmt.Registry) error {

	if swag.IsZero(m.ConditionState) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionStateEnum("conditionState", "body", m.ConditionState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WeatherData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeatherData) UnmarshalBinary(b []byte) error {
	var res WeatherData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
