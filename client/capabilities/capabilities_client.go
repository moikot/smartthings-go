// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new capabilities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for capabilities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCapability(params *CreateCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCapabilityOK, error)

	DeleteCapability(params *DeleteCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCapabilityOK, error)

	GetCapability(params *GetCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilityOK, error)

	ListCapabilities(params *ListCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListCapabilitiesOK, error)

	ListNamespacedCapabilities(params *ListNamespacedCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNamespacedCapabilitiesOK, error)

	UpdateCapability(params *UpdateCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCapabilityOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCapability creates a capability

  Create a capability.
*/
func (a *Client) CreateCapability(params *CreateCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCapability",
		Method:             "POST",
		PathPattern:        "/capabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCapabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCapabilityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteCapability deletes a capability by id and version

  Delete a capability id and version.<br /><br />
Capability must be in `proposed` status. Once a capability is updated to `live` status, it cannot be deleted,
and must be transitioned to `deprecated`.

*/
func (a *Client) DeleteCapability(params *DeleteCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCapability",
		Method:             "DELETE",
		PathPattern:        "/capabilities/{capabilityId}/{capabilityVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCapabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCapabilityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCapability gets a capability by id and version

  Get a capability by id and version.
*/
func (a *Client) GetCapability(params *GetCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*GetCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCapability",
		Method:             "GET",
		PathPattern:        "/capabilities/{capabilityId}/{capabilityVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCapabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCapabilityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListCapabilities lists all capabilities

  List all standard capabilities.
*/
func (a *Client) ListCapabilities(params *ListCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCapabilities",
		Method:             "GET",
		PathPattern:        "/capabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCapabilitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCapabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCapabilitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListNamespacedCapabilities lists capabilities by namespace

  List capabilities by namespace.<br /><br />
Namespaces are used to organize a user's capabilities and provide a way to uniquely identify them. A user can
retrieve all of the capabilities under their assigned namespace by referencing it.
The namespace is recognizable as the first part of a capabilityId in the format `namespace.capabilityName`.

*/
func (a *Client) ListNamespacedCapabilities(params *ListNamespacedCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNamespacedCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNamespacedCapabilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNamespacedCapabilities",
		Method:             "GET",
		PathPattern:        "/capabilities/namespaces/{namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNamespacedCapabilitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNamespacedCapabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNamespacedCapabilitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateCapability updates a capability

  Update a capability.<br /><br />
Capabilities with a `proposed` status can be updated at will. Capabilities with a `live`, `deprecated`,
or `dead` status are immutable and can't be updated. Capability names cannot be changed.

*/
func (a *Client) UpdateCapability(params *UpdateCapabilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCapabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCapabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCapability",
		Method:             "PUT",
		PathPattern:        "/capabilities/{capabilityId}/{capabilityVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCapabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCapabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCapabilityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
