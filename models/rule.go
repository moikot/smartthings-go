// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule rule
//
// swagger:model Rule
type Rule struct {
	RuleRequest

	// Unique id for the rule
	// Required: true
	ID *string `json:"id"`

	// The status of the rule
	// Enum: [Enabled Disabled]
	Status *string `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Rule) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RuleRequest
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RuleRequest = aO0

	// AO1
	var dataAO1 struct {
		ID *string `json:"id"`

		Status *string `json:"status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ID = dataAO1.ID

	m.Status = dataAO1.Status

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Rule) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.RuleRequest)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ID *string `json:"id"`

		Status *string `json:"status,omitempty"`
	}

	dataAO1.ID = m.ID

	dataAO1.Status = m.Status

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RuleRequest
	if err := m.RuleRequest.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var ruleTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enabled","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleTypeStatusPropEnum = append(ruleTypeStatusPropEnum, v)
	}
}

// property enum
func (m *Rule) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ruleTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Rule) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
