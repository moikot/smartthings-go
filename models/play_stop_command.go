// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlayStopCommand Display type for a play/stop button.
//
// swagger:model playStopCommand
type PlayStopCommand struct {

	// command
	// Required: true
	Command *PlayStopCommandCommand `json:"command"`
}

// Validate validates this play stop command
func (m *PlayStopCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayStopCommand) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayStopCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayStopCommand) UnmarshalBinary(b []byte) error {
	var res PlayStopCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PlayStopCommandCommand To specify separate commands with no arguments for on and off, use the “play” and “stop” fields respectively. To specify a single command, use “name” for the command and the “play” and “stop” fields for the arguments.
//
// swagger:model PlayStopCommandCommand
type PlayStopCommandCommand struct {

	// name
	Name string `json:"name,omitempty"`

	// play
	// Required: true
	Play *string `json:"play"`

	// stop
	// Required: true
	Stop *string `json:"stop"`
}

// Validate validates this play stop command command
func (m *PlayStopCommandCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayStopCommandCommand) validatePlay(formats strfmt.Registry) error {

	if err := validate.Required("command"+"."+"play", "body", m.Play); err != nil {
		return err
	}

	return nil
}

func (m *PlayStopCommandCommand) validateStop(formats strfmt.Registry) error {

	if err := validate.Required("command"+"."+"stop", "body", m.Stop); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayStopCommandCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayStopCommandCommand) UnmarshalBinary(b []byte) error {
	var res PlayStopCommandCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
