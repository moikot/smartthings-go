// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppClassification An App maybe associated to many classifications.  A classification drives how the integration is presented
// to the user in the SmartThings mobile clients.  These classifications include:
// * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
// * SERVICE - Denotes an integration that is classified as a "Service".
// * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
// * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
// * HIDDEN - Denotes an integration that should not display in mobile clients
//
//
// swagger:model AppClassification
type AppClassification string

const (

	// AppClassificationAUTOMATION captures enum value "AUTOMATION"
	AppClassificationAUTOMATION AppClassification = "AUTOMATION"

	// AppClassificationSERVICE captures enum value "SERVICE"
	AppClassificationSERVICE AppClassification = "SERVICE"

	// AppClassificationDEVICE captures enum value "DEVICE"
	AppClassificationDEVICE AppClassification = "DEVICE"

	// AppClassificationCONNECTEDSERVICE captures enum value "CONNECTED_SERVICE"
	AppClassificationCONNECTEDSERVICE AppClassification = "CONNECTED_SERVICE"

	// AppClassificationHIDDEN captures enum value "HIDDEN"
	AppClassificationHIDDEN AppClassification = "HIDDEN"

	// AppClassificationLABS captures enum value "LABS"
	AppClassificationLABS AppClassification = "LABS"
)

// for schema
var appClassificationEnum []interface{}

func init() {
	var res []AppClassification
	if err := json.Unmarshal([]byte(`["AUTOMATION","SERVICE","DEVICE","CONNECTED_SERVICE","HIDDEN","LABS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appClassificationEnum = append(appClassificationEnum, v)
	}
}

func (m AppClassification) validateAppClassificationEnum(path, location string, value AppClassification) error {
	if err := validate.EnumCase(path, location, value, appClassificationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app classification
func (m AppClassification) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppClassificationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
