// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// NewUpdateSignatureTypeParams creates a new UpdateSignatureTypeParams object
// with the default values initialized.
func NewUpdateSignatureTypeParams() *UpdateSignatureTypeParams {
	var ()
	return &UpdateSignatureTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSignatureTypeParamsWithTimeout creates a new UpdateSignatureTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSignatureTypeParamsWithTimeout(timeout time.Duration) *UpdateSignatureTypeParams {
	var ()
	return &UpdateSignatureTypeParams{

		timeout: timeout,
	}
}

// NewUpdateSignatureTypeParamsWithContext creates a new UpdateSignatureTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSignatureTypeParamsWithContext(ctx context.Context) *UpdateSignatureTypeParams {
	var ()
	return &UpdateSignatureTypeParams{

		Context: ctx,
	}
}

// NewUpdateSignatureTypeParamsWithHTTPClient creates a new UpdateSignatureTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSignatureTypeParamsWithHTTPClient(client *http.Client) *UpdateSignatureTypeParams {
	var ()
	return &UpdateSignatureTypeParams{
		HTTPClient: client,
	}
}

/*UpdateSignatureTypeParams contains all the parameters to send to the API endpoint
for the update signature type operation typically these are written to a http.Request
*/
type UpdateSignatureTypeParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*AppNameOrID
	  The appName or appId field of an app.

	*/
	AppNameOrID string
	/*UpdateSignatureTypeRequest*/
	UpdateSignatureTypeRequest *models.UpdateSignatureTypeRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update signature type params
func (o *UpdateSignatureTypeParams) WithTimeout(timeout time.Duration) *UpdateSignatureTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update signature type params
func (o *UpdateSignatureTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update signature type params
func (o *UpdateSignatureTypeParams) WithContext(ctx context.Context) *UpdateSignatureTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update signature type params
func (o *UpdateSignatureTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update signature type params
func (o *UpdateSignatureTypeParams) WithHTTPClient(client *http.Client) *UpdateSignatureTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update signature type params
func (o *UpdateSignatureTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the update signature type params
func (o *UpdateSignatureTypeParams) WithAuthorization(authorization string) *UpdateSignatureTypeParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the update signature type params
func (o *UpdateSignatureTypeParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAppNameOrID adds the appNameOrID to the update signature type params
func (o *UpdateSignatureTypeParams) WithAppNameOrID(appNameOrID string) *UpdateSignatureTypeParams {
	o.SetAppNameOrID(appNameOrID)
	return o
}

// SetAppNameOrID adds the appNameOrId to the update signature type params
func (o *UpdateSignatureTypeParams) SetAppNameOrID(appNameOrID string) {
	o.AppNameOrID = appNameOrID
}

// WithUpdateSignatureTypeRequest adds the updateSignatureTypeRequest to the update signature type params
func (o *UpdateSignatureTypeParams) WithUpdateSignatureTypeRequest(updateSignatureTypeRequest *models.UpdateSignatureTypeRequest) *UpdateSignatureTypeParams {
	o.SetUpdateSignatureTypeRequest(updateSignatureTypeRequest)
	return o
}

// SetUpdateSignatureTypeRequest adds the updateSignatureTypeRequest to the update signature type params
func (o *UpdateSignatureTypeParams) SetUpdateSignatureTypeRequest(updateSignatureTypeRequest *models.UpdateSignatureTypeRequest) {
	o.UpdateSignatureTypeRequest = updateSignatureTypeRequest
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSignatureTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param appNameOrId
	if err := r.SetPathParam("appNameOrId", o.AppNameOrID); err != nil {
		return err
	}

	if o.UpdateSignatureTypeRequest != nil {
		if err := r.SetBodyParam(o.UpdateSignatureTypeRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
