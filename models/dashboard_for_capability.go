// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardForCapability The dashboard is the main view in the SmartThings app that shows a list of devices and their state.
//
// swagger:model dashboardForCapability
type DashboardForCapability struct {

	// actions
	Actions []*DashboardForCapabilityActionsItems0 `json:"actions"`

	// basic plus
	BasicPlus []*BasicPlusItem `json:"basicPlus"`

	// states
	States []*DashboardForCapabilityStatesItems0 `json:"states"`
}

// Validate validates this dashboard for capability
func (m *DashboardForCapability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasicPlus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardForCapability) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DashboardForCapability) validateBasicPlus(formats strfmt.Registry) error {

	if swag.IsZero(m.BasicPlus) { // not required
		return nil
	}

	for i := 0; i < len(m.BasicPlus); i++ {
		if swag.IsZero(m.BasicPlus[i]) { // not required
			continue
		}

		if m.BasicPlus[i] != nil {
			if err := m.BasicPlus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("basicPlus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DashboardForCapability) validateStates(formats strfmt.Registry) error {

	if swag.IsZero(m.States) { // not required
		return nil
	}

	for i := 0; i < len(m.States); i++ {
		if swag.IsZero(m.States[i]) { // not required
			continue
		}

		if m.States[i] != nil {
			if err := m.States[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("states" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardForCapability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardForCapability) UnmarshalBinary(b []byte) error {
	var res DashboardForCapability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DashboardForCapabilityActionsItems0 dashboard for capability actions items0
//
// swagger:model DashboardForCapabilityActionsItems0
type DashboardForCapabilityActionsItems0 struct {

	// Specify the type of UI component to use to display this action or state. The corresponding field must also be included. For example, if you specify "switch" here, you must also include the "switch" key and its object definition for this action or state.
	// Required: true
	// Enum: [pushButton toggleSwitch switch standbyPowerSwitch playPause playStop]
	DisplayType *string `json:"displayType"`

	// group
	Group Group `json:"group,omitempty"`

	// play pause
	PlayPause *PlayPause `json:"playPause,omitempty"`

	// play stop
	PlayStop *PlayStop `json:"playStop,omitempty"`

	// push button
	PushButton *PushButton `json:"pushButton,omitempty"`

	// standby power switch
	StandbyPowerSwitch *StandbyPowerSwitchForDashboard `json:"standbyPowerSwitch,omitempty"`

	// switch
	Switch *SwitchForDashboard `json:"switch,omitempty"`

	// toggle switch
	ToggleSwitch *ToggleSwitchForDashboard `json:"toggleSwitch,omitempty"`
}

// Validate validates this dashboard for capability actions items0
func (m *DashboardForCapabilityActionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayPause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandbyPowerSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToggleSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dashboardForCapabilityActionsItems0TypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pushButton","toggleSwitch","switch","standbyPowerSwitch","playPause","playStop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardForCapabilityActionsItems0TypeDisplayTypePropEnum = append(dashboardForCapabilityActionsItems0TypeDisplayTypePropEnum, v)
	}
}

const (

	// DashboardForCapabilityActionsItems0DisplayTypePushButton captures enum value "pushButton"
	DashboardForCapabilityActionsItems0DisplayTypePushButton string = "pushButton"

	// DashboardForCapabilityActionsItems0DisplayTypeToggleSwitch captures enum value "toggleSwitch"
	DashboardForCapabilityActionsItems0DisplayTypeToggleSwitch string = "toggleSwitch"

	// DashboardForCapabilityActionsItems0DisplayTypeSwitch captures enum value "switch"
	DashboardForCapabilityActionsItems0DisplayTypeSwitch string = "switch"

	// DashboardForCapabilityActionsItems0DisplayTypeStandbyPowerSwitch captures enum value "standbyPowerSwitch"
	DashboardForCapabilityActionsItems0DisplayTypeStandbyPowerSwitch string = "standbyPowerSwitch"

	// DashboardForCapabilityActionsItems0DisplayTypePlayPause captures enum value "playPause"
	DashboardForCapabilityActionsItems0DisplayTypePlayPause string = "playPause"

	// DashboardForCapabilityActionsItems0DisplayTypePlayStop captures enum value "playStop"
	DashboardForCapabilityActionsItems0DisplayTypePlayStop string = "playStop"
)

// prop value enum
func (m *DashboardForCapabilityActionsItems0) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardForCapabilityActionsItems0TypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DashboardForCapabilityActionsItems0) validateDisplayType(formats strfmt.Registry) error {

	if err := validate.Required("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", *m.DisplayType); err != nil {
		return err
	}

	return nil
}

func (m *DashboardForCapabilityActionsItems0) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if err := m.Group.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("group")
		}
		return err
	}

	return nil
}

func (m *DashboardForCapabilityActionsItems0) validatePlayPause(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayPause) { // not required
		return nil
	}

	if m.PlayPause != nil {
		if err := m.PlayPause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("playPause")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardForCapabilityActionsItems0) validatePlayStop(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayStop) { // not required
		return nil
	}

	if m.PlayStop != nil {
		if err := m.PlayStop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("playStop")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardForCapabilityActionsItems0) validatePushButton(formats strfmt.Registry) error {

	if swag.IsZero(m.PushButton) { // not required
		return nil
	}

	if m.PushButton != nil {
		if err := m.PushButton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pushButton")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardForCapabilityActionsItems0) validateStandbyPowerSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.StandbyPowerSwitch) { // not required
		return nil
	}

	if m.StandbyPowerSwitch != nil {
		if err := m.StandbyPowerSwitch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standbyPowerSwitch")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardForCapabilityActionsItems0) validateSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.Switch) { // not required
		return nil
	}

	if m.Switch != nil {
		if err := m.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardForCapabilityActionsItems0) validateToggleSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.ToggleSwitch) { // not required
		return nil
	}

	if m.ToggleSwitch != nil {
		if err := m.ToggleSwitch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("toggleSwitch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardForCapabilityActionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardForCapabilityActionsItems0) UnmarshalBinary(b []byte) error {
	var res DashboardForCapabilityActionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DashboardForCapabilityStatesItems0 dashboard for capability states items0
//
// swagger:model DashboardForCapabilityStatesItems0
type DashboardForCapabilityStatesItems0 struct {

	// alternatives
	Alternatives interface{} `json:"alternatives,omitempty"`

	// group
	Group Group `json:"group,omitempty"`

	// label
	// Required: true
	Label FormattedLabel `json:"label"`
}

// Validate validates this dashboard for capability states items0
func (m *DashboardForCapabilityStatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardForCapabilityStatesItems0) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if err := m.Group.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("group")
		}
		return err
	}

	return nil
}

func (m *DashboardForCapabilityStatesItems0) validateLabel(formats strfmt.Registry) error {

	if err := m.Label.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("label")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardForCapabilityStatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardForCapabilityStatesItems0) UnmarshalBinary(b []byte) error {
	var res DashboardForCapabilityStatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
