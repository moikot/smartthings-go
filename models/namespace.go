// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Namespace namespace
//
// swagger:model Namespace
type Namespace struct {

	// A URL safe globally unique namespace name (ascii letters and numbers only)
	// Required: true
	Name *string `json:"name"`

	// id of the owner (user, or in the future, organization)
	// Required: true
	OwnerID *string `json:"ownerId"`

	// The type of owner of the namespace.
	// Required: true
	// Enum: [user organization system]
	OwnerType *string `json:"ownerType"`
}

// Validate validates this namespace
func (m *Namespace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Namespace) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Namespace) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("ownerId", "body", m.OwnerID); err != nil {
		return err
	}

	return nil
}

var namespaceTypeOwnerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","organization","system"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		namespaceTypeOwnerTypePropEnum = append(namespaceTypeOwnerTypePropEnum, v)
	}
}

const (

	// NamespaceOwnerTypeUser captures enum value "user"
	NamespaceOwnerTypeUser string = "user"

	// NamespaceOwnerTypeOrganization captures enum value "organization"
	NamespaceOwnerTypeOrganization string = "organization"

	// NamespaceOwnerTypeSystem captures enum value "system"
	NamespaceOwnerTypeSystem string = "system"
)

// prop value enum
func (m *Namespace) validateOwnerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, namespaceTypeOwnerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Namespace) validateOwnerType(formats strfmt.Registry) error {

	if err := validate.Required("ownerType", "body", m.OwnerType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOwnerTypeEnum("ownerType", "body", *m.OwnerType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Namespace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Namespace) UnmarshalBinary(b []byte) error {
	var res Namespace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
