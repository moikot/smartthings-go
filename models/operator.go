// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Operator The method to compare
//
// swagger:model operator
type Operator string

const (

	// OperatorCONTAINS captures enum value "CONTAINS"
	OperatorCONTAINS Operator = "CONTAINS"

	// OperatorDOESNOTCONTAIN captures enum value "DOES_NOT_CONTAIN"
	OperatorDOESNOTCONTAIN Operator = "DOES_NOT_CONTAIN"

	// OperatorEQUALS captures enum value "EQUALS"
	OperatorEQUALS Operator = "EQUALS"

	// OperatorDOESNOTEQUAL captures enum value "DOES_NOT_EQUAL"
	OperatorDOESNOTEQUAL Operator = "DOES_NOT_EQUAL"

	// OperatorGREATERTHAN captures enum value "GREATER_THAN"
	OperatorGREATERTHAN Operator = "GREATER_THAN"

	// OperatorGREATERTHANOREQUALS captures enum value "GREATER_THAN_OR_EQUALS"
	OperatorGREATERTHANOREQUALS Operator = "GREATER_THAN_OR_EQUALS"

	// OperatorLESSTHAN captures enum value "LESS_THAN"
	OperatorLESSTHAN Operator = "LESS_THAN"

	// OperatorLESSTHANOREQUALS captures enum value "LESS_THAN_OR_EQUALS"
	OperatorLESSTHANOREQUALS Operator = "LESS_THAN_OR_EQUALS"
)

// for schema
var operatorEnum []interface{}

func init() {
	var res []Operator
	if err := json.Unmarshal([]byte(`["CONTAINS","DOES_NOT_CONTAIN","EQUALS","DOES_NOT_EQUAL","GREATER_THAN","GREATER_THAN_OR_EQUALS","LESS_THAN","LESS_THAN_OR_EQUALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operatorEnum = append(operatorEnum, v)
	}
}

func (m Operator) validateOperatorEnum(path, location string, value Operator) error {
	if err := validate.EnumCase(path, location, value, operatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this operator
func (m Operator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
