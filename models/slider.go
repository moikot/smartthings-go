// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Slider slider
//
// swagger:model slider
type Slider struct {
	SliderBase

	SliderAllOf1

	// argument type
	ArgumentType ArgumentType `json:"argumentType,omitempty"`

	// The command which will send the value of the slider as an argument
	Command string `json:"command,omitempty"`

	// value
	Value Value `json:"value,omitempty"`

	// value type
	ValueType ValueType `json:"valueType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Slider) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SliderBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SliderBase = aO0

	// AO1
	var aO1 SliderAllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.SliderAllOf1 = aO1

	// AO2
	var dataAO2 struct {
		ArgumentType ArgumentType `json:"argumentType,omitempty"`

		Command string `json:"command,omitempty"`

		Value Value `json:"value,omitempty"`

		ValueType ValueType `json:"valueType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.ArgumentType = dataAO2.ArgumentType

	m.Command = dataAO2.Command

	m.Value = dataAO2.Value

	m.ValueType = dataAO2.ValueType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Slider) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.SliderBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.SliderAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ArgumentType ArgumentType `json:"argumentType,omitempty"`

		Command string `json:"command,omitempty"`

		Value Value `json:"value,omitempty"`

		ValueType ValueType `json:"valueType,omitempty"`
	}

	dataAO2.ArgumentType = m.ArgumentType

	dataAO2.Command = m.Command

	dataAO2.Value = m.Value

	dataAO2.ValueType = m.ValueType

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this slider
func (m *Slider) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SliderBase
	if err := m.SliderBase.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with SliderAllOf1

	if err := m.validateArgumentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Slider) validateArgumentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ArgumentType) { // not required
		return nil
	}

	if err := m.ArgumentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("argumentType")
		}
		return err
	}

	return nil
}

func (m *Slider) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := m.Value.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("value")
		}
		return err
	}

	return nil
}

func (m *Slider) validateValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueType) { // not required
		return nil
	}

	if err := m.ValueType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("valueType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Slider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Slider) UnmarshalBinary(b []byte) error {
	var res Slider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SliderAllOf1 To display slider display type, at least one of the command and value must be specified.
//
// swagger:model SliderAllOf1
type SliderAllOf1 interface{}
