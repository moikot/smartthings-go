// Code generated by go-swagger; DO NOT EDIT.

package rooms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rooms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rooms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRoom(params *CreateRoomParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoomOK, error)

	DeleteRoom(params *DeleteRoomParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoomOK, error)

	GetRoom(params *GetRoomParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoomOK, error)

	ListRooms(params *ListRoomsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRoomsOK, error)

	UpdateRoom(params *UpdateRoomParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRoomOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRoom creates a room

  Create a Room for the Location.

*/
func (a *Client) CreateRoom(params *CreateRoomParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRoom",
		Method:             "POST",
		PathPattern:        "/locations/{locationId}/rooms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRoomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteRoom deletes a room

  Delete a Room from a location.
*/
func (a *Client) DeleteRoom(params *DeleteRoomParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoom",
		Method:             "DELETE",
		PathPattern:        "/locations/{locationId}/rooms/{roomId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRoomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRoom gets a room

  Get a specific Room.
*/
func (a *Client) GetRoom(params *GetRoomParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoom",
		Method:             "GET",
		PathPattern:        "/locations/{locationId}/rooms/{roomId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRoomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListRooms lists rooms

  List all Rooms currently available in a Location.
*/
func (a *Client) ListRooms(params *ListRoomsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRoomsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRoomsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRooms",
		Method:             "GET",
		PathPattern:        "/locations/{locationId}/rooms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRoomsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRoomsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRoomsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateRoom updates a room

  All the fields in the request body are optional. Only the specified fields will be updated.
*/
func (a *Client) UpdateRoom(params *UpdateRoomParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRoom",
		Method:             "PUT",
		PathPattern:        "/locations/{locationId}/rooms/{roomId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRoomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
