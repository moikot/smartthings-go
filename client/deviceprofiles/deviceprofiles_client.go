// Code generated by go-swagger; DO NOT EDIT.

package deviceprofiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deviceprofiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deviceprofiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDeviceProfile(params *CreateDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeviceProfileOK, error)

	DeleteDeviceProfile(params *DeleteDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeviceProfileOK, error)

	GetDeviceProfile(params *GetDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceProfileOK, error)

	ListDeviceProfiles(params *ListDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeviceProfilesOK, error)

	UpdateDeviceProfile(params *UpdateDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceProfileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDeviceProfile creates a device profile

  Create a device profile.
*/
func (a *Client) CreateDeviceProfile(params *CreateDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeviceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeviceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDeviceProfile",
		Method:             "POST",
		PathPattern:        "/deviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDeviceProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeviceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDeviceProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteDeviceProfile deletes a device profile

  Delete a device profile by ID. Admin use only.
*/
func (a *Client) DeleteDeviceProfile(params *DeleteDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeviceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceProfile",
		Method:             "DELETE",
		PathPattern:        "/deviceprofiles/{deviceProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDeviceProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetDeviceProfile gs e t a device profile

  GET a device profile.
*/
func (a *Client) GetDeviceProfile(params *GetDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceProfile",
		Method:             "GET",
		PathPattern:        "/deviceprofiles/{deviceProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDeviceProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListDeviceProfiles lists all device profiles for the authenticated user

  List device profiles.
*/
func (a *Client) ListDeviceProfiles(params *ListDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeviceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeviceProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDeviceProfiles",
		Method:             "GET",
		PathPattern:        "/deviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDeviceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeviceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDeviceProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateDeviceProfile updates a device profile

  Update a device profile. The device profile has to be in development status
*/
func (a *Client) UpdateDeviceProfile(params *UpdateDeviceProfileParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeviceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceProfile",
		Method:             "PUT",
		PathPattern:        "/deviceprofiles/{deviceProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDeviceProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
