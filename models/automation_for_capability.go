// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutomationForCapability In the SmartThings app, you can build custom Automations to automatically trigger actions when certain condition regarding device state is met.
//
//
// swagger:model automationForCapability
type AutomationForCapability struct {

	// To specify the actions of device control based on the device state in the automation view of SmartThings app.
	Actions []*AutomationForCapabilityActionsItems0 `json:"actions"`

	// To specify the conditions of device state to trigger actions in the automation view of SmartThings app.
	Conditions []*AutomationForCapabilityConditionsItems0 `json:"conditions"`
}

// Validate validates this automation for capability
func (m *AutomationForCapability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutomationForCapability) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AutomationForCapability) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutomationForCapability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutomationForCapability) UnmarshalBinary(b []byte) error {
	var res AutomationForCapability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AutomationForCapabilityActionsItems0 automation for capability actions items0
//
// swagger:model AutomationForCapabilityActionsItems0
type AutomationForCapabilityActionsItems0 struct {

	// Specify the type of UI component to use to display this action or state. The corresponding field must also be included. For example, if you specify "switch" here, you must also include the "switch" key and its object definition for this action or state.
	// Required: true
	// Enum: [slider list numberField textField multiArgCommand]
	DisplayType *string `json:"displayType"`

	// The effect used to emphasize this resource widget. The default value is false. If the emphasis value is true and this object has alternatives, a list will appear without a label
	Emphasis bool `json:"emphasis,omitempty"`

	// label
	// Required: true
	Label *string `json:"label"`

	// list
	List *ListForAutomationAction `json:"list,omitempty"`

	// multi arg command
	MultiArgCommand *MultiArgCommand `json:"multiArgCommand,omitempty"`

	// number field
	NumberField *NumberFieldForAutomationAction `json:"numberField,omitempty"`

	// slider
	Slider *SliderForAutomationAction `json:"slider,omitempty"`

	// text field
	TextField *TextFieldForAutomationAction `json:"textField,omitempty"`
}

// Validate validates this automation for capability actions items0
func (m *AutomationForCapabilityActionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiArgCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var automationForCapabilityActionsItems0TypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["slider","list","numberField","textField","multiArgCommand"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		automationForCapabilityActionsItems0TypeDisplayTypePropEnum = append(automationForCapabilityActionsItems0TypeDisplayTypePropEnum, v)
	}
}

const (

	// AutomationForCapabilityActionsItems0DisplayTypeSlider captures enum value "slider"
	AutomationForCapabilityActionsItems0DisplayTypeSlider string = "slider"

	// AutomationForCapabilityActionsItems0DisplayTypeList captures enum value "list"
	AutomationForCapabilityActionsItems0DisplayTypeList string = "list"

	// AutomationForCapabilityActionsItems0DisplayTypeNumberField captures enum value "numberField"
	AutomationForCapabilityActionsItems0DisplayTypeNumberField string = "numberField"

	// AutomationForCapabilityActionsItems0DisplayTypeTextField captures enum value "textField"
	AutomationForCapabilityActionsItems0DisplayTypeTextField string = "textField"

	// AutomationForCapabilityActionsItems0DisplayTypeMultiArgCommand captures enum value "multiArgCommand"
	AutomationForCapabilityActionsItems0DisplayTypeMultiArgCommand string = "multiArgCommand"
)

// prop value enum
func (m *AutomationForCapabilityActionsItems0) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, automationForCapabilityActionsItems0TypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AutomationForCapabilityActionsItems0) validateDisplayType(formats strfmt.Registry) error {

	if err := validate.Required("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", *m.DisplayType); err != nil {
		return err
	}

	return nil
}

func (m *AutomationForCapabilityActionsItems0) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *AutomationForCapabilityActionsItems0) validateList(formats strfmt.Registry) error {

	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationForCapabilityActionsItems0) validateMultiArgCommand(formats strfmt.Registry) error {

	if swag.IsZero(m.MultiArgCommand) { // not required
		return nil
	}

	if m.MultiArgCommand != nil {
		if err := m.MultiArgCommand.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiArgCommand")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationForCapabilityActionsItems0) validateNumberField(formats strfmt.Registry) error {

	if swag.IsZero(m.NumberField) { // not required
		return nil
	}

	if m.NumberField != nil {
		if err := m.NumberField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberField")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationForCapabilityActionsItems0) validateSlider(formats strfmt.Registry) error {

	if swag.IsZero(m.Slider) { // not required
		return nil
	}

	if m.Slider != nil {
		if err := m.Slider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slider")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationForCapabilityActionsItems0) validateTextField(formats strfmt.Registry) error {

	if swag.IsZero(m.TextField) { // not required
		return nil
	}

	if m.TextField != nil {
		if err := m.TextField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textField")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutomationForCapabilityActionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutomationForCapabilityActionsItems0) UnmarshalBinary(b []byte) error {
	var res AutomationForCapabilityActionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AutomationForCapabilityConditionsItems0 automation for capability conditions items0
//
// swagger:model AutomationForCapabilityConditionsItems0
type AutomationForCapabilityConditionsItems0 struct {

	// Specify the type of UI component to use to display this action or state. The corresponding field must also be included. For example, if you specify "switch" here, you must also include the "switch" key and its object definition for this action or state.
	// Required: true
	// Enum: [slider list numberField textField]
	DisplayType *string `json:"displayType"`

	// The effect used to emphasize this resource widget. The default value is false. If the emphasis value is true and this object has alternatives, a list will appear without a label
	Emphasis bool `json:"emphasis,omitempty"`

	// label
	// Required: true
	Label *string `json:"label"`

	// list
	List *ListForAutomationCondition `json:"list,omitempty"`

	// number field
	NumberField *NumberFieldForAutomationCondition `json:"numberField,omitempty"`

	// slider
	Slider *SliderForAutomationCondition `json:"slider,omitempty"`

	// text field
	TextField *TextFieldForAutomationCondition `json:"textField,omitempty"`
}

// Validate validates this automation for capability conditions items0
func (m *AutomationForCapabilityConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var automationForCapabilityConditionsItems0TypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["slider","list","numberField","textField"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		automationForCapabilityConditionsItems0TypeDisplayTypePropEnum = append(automationForCapabilityConditionsItems0TypeDisplayTypePropEnum, v)
	}
}

const (

	// AutomationForCapabilityConditionsItems0DisplayTypeSlider captures enum value "slider"
	AutomationForCapabilityConditionsItems0DisplayTypeSlider string = "slider"

	// AutomationForCapabilityConditionsItems0DisplayTypeList captures enum value "list"
	AutomationForCapabilityConditionsItems0DisplayTypeList string = "list"

	// AutomationForCapabilityConditionsItems0DisplayTypeNumberField captures enum value "numberField"
	AutomationForCapabilityConditionsItems0DisplayTypeNumberField string = "numberField"

	// AutomationForCapabilityConditionsItems0DisplayTypeTextField captures enum value "textField"
	AutomationForCapabilityConditionsItems0DisplayTypeTextField string = "textField"
)

// prop value enum
func (m *AutomationForCapabilityConditionsItems0) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, automationForCapabilityConditionsItems0TypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AutomationForCapabilityConditionsItems0) validateDisplayType(formats strfmt.Registry) error {

	if err := validate.Required("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", *m.DisplayType); err != nil {
		return err
	}

	return nil
}

func (m *AutomationForCapabilityConditionsItems0) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *AutomationForCapabilityConditionsItems0) validateList(formats strfmt.Registry) error {

	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationForCapabilityConditionsItems0) validateNumberField(formats strfmt.Registry) error {

	if swag.IsZero(m.NumberField) { // not required
		return nil
	}

	if m.NumberField != nil {
		if err := m.NumberField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberField")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationForCapabilityConditionsItems0) validateSlider(formats strfmt.Registry) error {

	if swag.IsZero(m.Slider) { // not required
		return nil
	}

	if m.Slider != nil {
		if err := m.Slider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slider")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationForCapabilityConditionsItems0) validateTextField(formats strfmt.Registry) error {

	if swag.IsZero(m.TextField) { // not required
		return nil
	}

	if m.TextField != nil {
		if err := m.TextField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textField")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutomationForCapabilityConditionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutomationForCapabilityConditionsItems0) UnmarshalBinary(b []byte) error {
	var res AutomationForCapabilityConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
