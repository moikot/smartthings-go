// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IntervalUnit interval unit
//
// swagger:model IntervalUnit
type IntervalUnit string

const (

	// IntervalUnitSecond captures enum value "Second"
	IntervalUnitSecond IntervalUnit = "Second"

	// IntervalUnitMinute captures enum value "Minute"
	IntervalUnitMinute IntervalUnit = "Minute"

	// IntervalUnitHour captures enum value "Hour"
	IntervalUnitHour IntervalUnit = "Hour"

	// IntervalUnitDay captures enum value "Day"
	IntervalUnitDay IntervalUnit = "Day"

	// IntervalUnitWeek captures enum value "Week"
	IntervalUnitWeek IntervalUnit = "Week"

	// IntervalUnitMonth captures enum value "Month"
	IntervalUnitMonth IntervalUnit = "Month"

	// IntervalUnitYear captures enum value "Year"
	IntervalUnitYear IntervalUnit = "Year"
)

// for schema
var intervalUnitEnum []interface{}

func init() {
	var res []IntervalUnit
	if err := json.Unmarshal([]byte(`["Second","Minute","Hour","Day","Week","Month","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intervalUnitEnum = append(intervalUnitEnum, v)
	}
}

func (m IntervalUnit) validateIntervalUnitEnum(path, location string, value IntervalUnit) error {
	if err := validate.EnumCase(path, location, value, intervalUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this interval unit
func (m IntervalUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIntervalUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
