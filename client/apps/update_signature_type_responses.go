// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// UpdateSignatureTypeReader is a Reader for the UpdateSignatureType structure.
type UpdateSignatureTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSignatureTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateSignatureTypeAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSignatureTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSignatureTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSignatureTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateSignatureTypeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateSignatureTypeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateSignatureTypeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateSignatureTypeAccepted creates a UpdateSignatureTypeAccepted with default headers values
func NewUpdateSignatureTypeAccepted() *UpdateSignatureTypeAccepted {
	return &UpdateSignatureTypeAccepted{}
}

/*UpdateSignatureTypeAccepted handles this case with default header values.

App signature type will be updated asynchronously.  Developer can expect change to take effect within a few minutes.

*/
type UpdateSignatureTypeAccepted struct {
	Payload models.UpdateSignatureTypeResponse
}

func (o *UpdateSignatureTypeAccepted) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/signature-type][%d] updateSignatureTypeAccepted  %+v", 202, o.Payload)
}

func (o *UpdateSignatureTypeAccepted) GetPayload() models.UpdateSignatureTypeResponse {
	return o.Payload
}

func (o *UpdateSignatureTypeAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSignatureTypeBadRequest creates a UpdateSignatureTypeBadRequest with default headers values
func NewUpdateSignatureTypeBadRequest() *UpdateSignatureTypeBadRequest {
	return &UpdateSignatureTypeBadRequest{}
}

/*UpdateSignatureTypeBadRequest handles this case with default header values.

Bad request
*/
type UpdateSignatureTypeBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *UpdateSignatureTypeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/signature-type][%d] updateSignatureTypeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSignatureTypeBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateSignatureTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSignatureTypeUnauthorized creates a UpdateSignatureTypeUnauthorized with default headers values
func NewUpdateSignatureTypeUnauthorized() *UpdateSignatureTypeUnauthorized {
	return &UpdateSignatureTypeUnauthorized{}
}

/*UpdateSignatureTypeUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateSignatureTypeUnauthorized struct {
}

func (o *UpdateSignatureTypeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/signature-type][%d] updateSignatureTypeUnauthorized ", 401)
}

func (o *UpdateSignatureTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSignatureTypeForbidden creates a UpdateSignatureTypeForbidden with default headers values
func NewUpdateSignatureTypeForbidden() *UpdateSignatureTypeForbidden {
	return &UpdateSignatureTypeForbidden{}
}

/*UpdateSignatureTypeForbidden handles this case with default header values.

Forbidden
*/
type UpdateSignatureTypeForbidden struct {
}

func (o *UpdateSignatureTypeForbidden) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/signature-type][%d] updateSignatureTypeForbidden ", 403)
}

func (o *UpdateSignatureTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSignatureTypeUnprocessableEntity creates a UpdateSignatureTypeUnprocessableEntity with default headers values
func NewUpdateSignatureTypeUnprocessableEntity() *UpdateSignatureTypeUnprocessableEntity {
	return &UpdateSignatureTypeUnprocessableEntity{}
}

/*UpdateSignatureTypeUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type UpdateSignatureTypeUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *UpdateSignatureTypeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/signature-type][%d] updateSignatureTypeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateSignatureTypeUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateSignatureTypeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSignatureTypeTooManyRequests creates a UpdateSignatureTypeTooManyRequests with default headers values
func NewUpdateSignatureTypeTooManyRequests() *UpdateSignatureTypeTooManyRequests {
	return &UpdateSignatureTypeTooManyRequests{}
}

/*UpdateSignatureTypeTooManyRequests handles this case with default header values.

Too many requests
*/
type UpdateSignatureTypeTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *UpdateSignatureTypeTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/signature-type][%d] updateSignatureTypeTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSignatureTypeTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateSignatureTypeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSignatureTypeDefault creates a UpdateSignatureTypeDefault with default headers values
func NewUpdateSignatureTypeDefault(code int) *UpdateSignatureTypeDefault {
	return &UpdateSignatureTypeDefault{
		_statusCode: code,
	}
}

/*UpdateSignatureTypeDefault handles this case with default header values.

Unexpected error
*/
type UpdateSignatureTypeDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the update signature type default response
func (o *UpdateSignatureTypeDefault) Code() int {
	return o._statusCode
}

func (o *UpdateSignatureTypeDefault) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/signature-type][%d] updateSignatureType default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateSignatureTypeDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateSignatureTypeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
