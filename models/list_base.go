// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListBase list base
//
// swagger:model listBase
type ListBase struct {

	// alternatives
	// Required: true
	Alternatives Alternatives `json:"alternatives"`

	// supported values
	SupportedValues SupportedValues `json:"supportedValues,omitempty"`
}

// Validate validates this list base
func (m *ListBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternatives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListBase) validateAlternatives(formats strfmt.Registry) error {

	if err := validate.Required("alternatives", "body", m.Alternatives); err != nil {
		return err
	}

	if err := m.Alternatives.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alternatives")
		}
		return err
	}

	return nil
}

func (m *ListBase) validateSupportedValues(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedValues) { // not required
		return nil
	}

	if err := m.SupportedValues.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supportedValues")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListBase) UnmarshalBinary(b []byte) error {
	var res ListBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
