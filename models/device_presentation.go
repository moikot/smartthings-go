// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicePresentation device presentation
//
// swagger:model devicePresentation
type DevicePresentation struct {

	// automation
	Automation *Automation `json:"automation,omitempty"`

	// dashboard
	Dashboard *Dashboard `json:"dashboard,omitempty"`

	// detail view
	DetailView DetailView `json:"detailView,omitempty"`

	// dp info
	// Required: true
	DpInfo DpInfo `json:"dpInfo"`

	// icon Url
	IconURL IconURL `json:"iconUrl,omitempty"`

	// language
	Language Language `json:"language,omitempty"`

	// mnmn
	// Required: true
	Mnmn Mnmn `json:"mnmn"`

	// vid
	// Required: true
	Vid Vid `json:"vid"`
}

// Validate validates this device presentation
func (m *DevicePresentation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDpInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMnmn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicePresentation) validateAutomation(formats strfmt.Registry) error {

	if swag.IsZero(m.Automation) { // not required
		return nil
	}

	if m.Automation != nil {
		if err := m.Automation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automation")
			}
			return err
		}
	}

	return nil
}

func (m *DevicePresentation) validateDashboard(formats strfmt.Registry) error {

	if swag.IsZero(m.Dashboard) { // not required
		return nil
	}

	if m.Dashboard != nil {
		if err := m.Dashboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard")
			}
			return err
		}
	}

	return nil
}

func (m *DevicePresentation) validateDetailView(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailView) { // not required
		return nil
	}

	if err := m.DetailView.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("detailView")
		}
		return err
	}

	return nil
}

func (m *DevicePresentation) validateDpInfo(formats strfmt.Registry) error {

	if err := validate.Required("dpInfo", "body", m.DpInfo); err != nil {
		return err
	}

	if err := m.DpInfo.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dpInfo")
		}
		return err
	}

	return nil
}

func (m *DevicePresentation) validateIconURL(formats strfmt.Registry) error {

	if swag.IsZero(m.IconURL) { // not required
		return nil
	}

	if err := m.IconURL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("iconUrl")
		}
		return err
	}

	return nil
}

func (m *DevicePresentation) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if err := m.Language.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("language")
		}
		return err
	}

	return nil
}

func (m *DevicePresentation) validateMnmn(formats strfmt.Registry) error {

	if err := m.Mnmn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mnmn")
		}
		return err
	}

	return nil
}

func (m *DevicePresentation) validateVid(formats strfmt.Registry) error {

	if err := m.Vid.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vid")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicePresentation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicePresentation) UnmarshalBinary(b []byte) error {
	var res DevicePresentation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
