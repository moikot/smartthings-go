// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateLocationRequest update location request
//
// swagger:model UpdateLocationRequest
type UpdateLocationRequest struct {

	// Additional information about the location that allows SmartThings to further define your location.
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty"`

	// A geographical latitude.
	Latitude float64 `json:"latitude,omitempty"`

	// An IETF BCP 47 language tag representing the chosen locale for this location.
	Locale string `json:"locale,omitempty"`

	// A geographical longitude.
	Longitude float64 `json:"longitude,omitempty"`

	// A nickname for the location.
	// Required: true
	// Max Length: 40
	// Min Length: 1
	Name *string `json:"name"`

	// The radius in meters around latitude and longitude which defines this location.
	RegionRadius int64 `json:"regionRadius,omitempty"`

	// The desired temperature scale used within location. Value can be F or C.
	TemperatureScale string `json:"temperatureScale,omitempty"`
}

// Validate validates this update location request
func (m *UpdateLocationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateLocationRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateLocationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateLocationRequest) UnmarshalBinary(b []byte) error {
	var res UpdateLocationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
