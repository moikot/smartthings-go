// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllSubscriptions(params *DeleteAllSubscriptionsParams) (*DeleteAllSubscriptionsOK, error)

	DeleteSubscription(params *DeleteSubscriptionParams) (*DeleteSubscriptionOK, error)

	GetSubscription(params *GetSubscriptionParams) (*GetSubscriptionOK, error)

	ListSubscriptions(params *ListSubscriptionsParams) (*ListSubscriptionsOK, error)

	SaveSubscription(params *SaveSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*SaveSubscriptionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAllSubscriptions deletes all of an installed app s subscriptions

  Delete all subscriptions for the installed app.

*/
func (a *Client) DeleteAllSubscriptions(params *DeleteAllSubscriptionsParams) (*DeleteAllSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllSubscriptions",
		Method:             "DELETE",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAllSubscriptionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteSubscription deletes an installed app s subscription

  Delete a specific subscription for the installed app.

*/
func (a *Client) DeleteSubscription(params *DeleteSubscriptionParams) (*DeleteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSubscription",
		Method:             "DELETE",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSubscriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSubscription gets an installed app s subscription

  Get a specific subscription for the installed app.

*/
func (a *Client) GetSubscription(params *GetSubscriptionParams) (*GetSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubscription",
		Method:             "GET",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSubscriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListSubscriptions lists an installed app s subscriptions

  List the subscriptions for the installed app.

*/
func (a *Client) ListSubscriptions(params *ListSubscriptionsParams) (*ListSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSubscriptions",
		Method:             "GET",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSubscriptionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SaveSubscription creates a subscription for an installed app

  Create a subscription to a type of event from the specified source.
Both the source and the installed app must be in the location specified
and the installed app must have read access to the event being subscribed to. An installed app is only permitted
to created 20 subscriptions.

### Authorization scopes
For installed app principal:
* installed app id matches the incoming request installed app id location must match the installed app location

| Subscription Type  | Scope required                                                                         |
| ------------------ | ---------------------------------------------------------------------------------------|
| DEVICE             | `r:devices:$deviceId`                                                                  |
| CAPABILITY         | `r:devices:*:*:$capability` or `r:devices:*`,                                          |
| MODE               | `r:locations:$locationId` or `r:locations:*`                                           |
| DEVICE_LIFECYCLE   | `r:devices:$deviceId` or `r:devices:*`                                                 |
| DEVICE_HEALTH      | `r:devices:$deviceId` or `r:devices:*`                                                 |
| SECURITY_ARM_STATE | `r:security:locations:$locationId:armstate` or `r:security:locations:*:armstate`       |
| HUB_HEALTH         | `r:hubs`                                                                               |
| SCENE_LIFECYCLE    | `r:scenes:*`                                                                           |

*/
func (a *Client) SaveSubscription(params *SaveSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*SaveSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveSubscription",
		Method:             "POST",
		PathPattern:        "/installedapps/{installedAppId}/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SaveSubscriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
