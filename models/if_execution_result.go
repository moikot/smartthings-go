// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IfExecutionResult if execution result
//
// swagger:model IfExecutionResult
type IfExecutionResult string

const (

	// IfExecutionResultTrue captures enum value "True"
	IfExecutionResultTrue IfExecutionResult = "True"

	// IfExecutionResultFalse captures enum value "False"
	IfExecutionResultFalse IfExecutionResult = "False"
)

// for schema
var ifExecutionResultEnum []interface{}

func init() {
	var res []IfExecutionResult
	if err := json.Unmarshal([]byte(`["True","False"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ifExecutionResultEnum = append(ifExecutionResultEnum, v)
	}
}

func (m IfExecutionResult) validateIfExecutionResultEnum(path, location string, value IfExecutionResult) error {
	if err := validate.EnumCase(path, location, value, ifExecutionResultEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this if execution result
func (m IfExecutionResult) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIfExecutionResultEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
