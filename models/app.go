// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// App app
//
// swagger:model App
type App struct {

	// A globally unique identifier for an app.
	// Format: uuid
	AppID strfmt.UUID `json:"appId,omitempty"`

	// A user defined unique identifier for an app.  It is alpha-numeric, may contain dashes,
	// underscores, periods, and be less then 250 characters long.  It must be unique within your account.
	//
	AppName string `json:"appName,omitempty"`

	// app type
	AppType AppType `json:"appType,omitempty"`

	// An App maybe associated to many classifications.  A classification drives how the integration is presented
	// to the user in the SmartThings mobile clients.  These classifications include:
	// * AUTOMATION - Denotes an integration that should display under the "Automation" tab in mobile clients.
	// * SERVICE - Denotes an integration that is classified as a "Service".
	// * DEVICE - Denotes an integration that should display under the "Device" tab in mobile clients.
	// * CONNECTED_SERVICE - Denotes an integration that should display under the "Connected Services" menu in mobile clients.
	// * HIDDEN - Denotes an integration that should not display in mobile clients
	//
	Classifications []AppClassification `json:"classifications"`

	// A UTC ISO-8601 Date-Time String
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// A default description for an app.
	//
	// Max Length: 250
	Description string `json:"description,omitempty"`

	// A default display name for an app.
	//
	// Max Length: 75
	DisplayName string `json:"displayName,omitempty"`

	// icon image
	IconImage *IconImage `json:"iconImage,omitempty"`

	// System generated metadata that impacts eligibility requirements around installing an App.
	InstallMetadata map[string]string `json:"installMetadata,omitempty"`

	// lambda smart app
	LambdaSmartApp *LambdaSmartApp `json:"lambdaSmartApp,omitempty"`

	// A UTC ISO-8601 Date-Time String
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// owner
	Owner *Owner `json:"owner,omitempty"`

	// principal type
	PrincipalType PrincipalType `json:"principalType,omitempty"`

	// Inform the installation systems that a particular app can only be installed once within a user's account.
	//
	SingleInstance *bool `json:"singleInstance,omitempty"`

	// ui
	UI *AppUISettings `json:"ui,omitempty"`

	// webhook smart app
	WebhookSmartApp *WebhookSmartApp `json:"webhookSmartApp,omitempty"`
}

// Validate validates this app
func (m *App) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLambdaSmartApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipalType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookSmartApp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *App) validateAppID(formats strfmt.Registry) error {

	if swag.IsZero(m.AppID) { // not required
		return nil
	}

	if err := validate.FormatOf("appId", "body", "uuid", m.AppID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *App) validateAppType(formats strfmt.Registry) error {

	if swag.IsZero(m.AppType) { // not required
		return nil
	}

	if err := m.AppType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appType")
		}
		return err
	}

	return nil
}

func (m *App) validateClassifications(formats strfmt.Registry) error {

	if swag.IsZero(m.Classifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Classifications); i++ {

		if err := m.Classifications[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classifications" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *App) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *App) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 250); err != nil {
		return err
	}

	return nil
}

func (m *App) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 75); err != nil {
		return err
	}

	return nil
}

func (m *App) validateIconImage(formats strfmt.Registry) error {

	if swag.IsZero(m.IconImage) { // not required
		return nil
	}

	if m.IconImage != nil {
		if err := m.IconImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iconImage")
			}
			return err
		}
	}

	return nil
}

func (m *App) validateLambdaSmartApp(formats strfmt.Registry) error {

	if swag.IsZero(m.LambdaSmartApp) { // not required
		return nil
	}

	if m.LambdaSmartApp != nil {
		if err := m.LambdaSmartApp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lambdaSmartApp")
			}
			return err
		}
	}

	return nil
}

func (m *App) validateLastUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *App) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *App) validatePrincipalType(formats strfmt.Registry) error {

	if swag.IsZero(m.PrincipalType) { // not required
		return nil
	}

	if err := m.PrincipalType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("principalType")
		}
		return err
	}

	return nil
}

func (m *App) validateUI(formats strfmt.Registry) error {

	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if m.UI != nil {
		if err := m.UI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

func (m *App) validateWebhookSmartApp(formats strfmt.Registry) error {

	if swag.IsZero(m.WebhookSmartApp) { // not required
		return nil
	}

	if m.WebhookSmartApp != nil {
		if err := m.WebhookSmartApp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhookSmartApp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *App) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *App) UnmarshalBinary(b []byte) error {
	var res App
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
