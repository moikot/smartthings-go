// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Subscription subscription
//
// swagger:model Subscription
type Subscription struct {

	// capability
	Capability *CapabilitySubscriptionDetail `json:"capability,omitempty"`

	// device
	Device *DeviceSubscriptionDetail `json:"device,omitempty"`

	// device health
	DeviceHealth *DeviceHealthDetail `json:"deviceHealth,omitempty"`

	// device lifecycle
	DeviceLifecycle *DeviceLifecycleDetail `json:"deviceLifecycle,omitempty"`

	// hub health
	HubHealth *HubHealthDetail `json:"hubHealth,omitempty"`

	// The id of the subscription.
	ID string `json:"id,omitempty"`

	// The id of the subscribing app.
	InstalledAppID string `json:"installedAppId,omitempty"`

	// mode
	Mode *ModeSubscriptionDetail `json:"mode,omitempty"`

	// scene lifecycle
	SceneLifecycle *SceneLifecycleDetail `json:"sceneLifecycle,omitempty"`

	// security arm state
	SecurityArmState *SecurityArmStateDetail `json:"securityArmState,omitempty"`

	// source type
	SourceType SubscriptionSource `json:"sourceType,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceLifecycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHubHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSceneLifecycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityArmState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateCapability(formats strfmt.Registry) error {

	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	if m.Capability != nil {
		if err := m.Capability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capability")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateDeviceHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceHealth) { // not required
		return nil
	}

	if m.DeviceHealth != nil {
		if err := m.DeviceHealth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceHealth")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateDeviceLifecycle(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceLifecycle) { // not required
		return nil
	}

	if m.DeviceLifecycle != nil {
		if err := m.DeviceLifecycle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceLifecycle")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateHubHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.HubHealth) { // not required
		return nil
	}

	if m.HubHealth != nil {
		if err := m.HubHealth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hubHealth")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateSceneLifecycle(formats strfmt.Registry) error {

	if swag.IsZero(m.SceneLifecycle) { // not required
		return nil
	}

	if m.SceneLifecycle != nil {
		if err := m.SceneLifecycle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sceneLifecycle")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateSecurityArmState(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityArmState) { // not required
		return nil
	}

	if m.SecurityArmState != nil {
		if err := m.SecurityArmState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityArmState")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateSourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	if err := m.SourceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sourceType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
