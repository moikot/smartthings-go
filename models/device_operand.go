// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceOperand device operand
//
// swagger:model DeviceOperand
type DeviceOperand struct {

	// aggregation
	Aggregation OperandAggregationMode `json:"aggregation,omitempty"`

	// attribute
	// Required: true
	Attribute *string `json:"attribute"`

	// capability
	// Required: true
	Capability *string `json:"capability"`

	// component
	// Required: true
	Component *string `json:"component"`

	// devices
	// Required: true
	Devices []string `json:"devices"`

	// path
	Path string `json:"path,omitempty"`

	// trigger
	Trigger TriggerMode `json:"trigger,omitempty"`
}

// Validate validates this device operand
func (m *DeviceOperand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttribute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceOperand) validateAggregation(formats strfmt.Registry) error {

	if swag.IsZero(m.Aggregation) { // not required
		return nil
	}

	if err := m.Aggregation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aggregation")
		}
		return err
	}

	return nil
}

func (m *DeviceOperand) validateAttribute(formats strfmt.Registry) error {

	if err := validate.Required("attribute", "body", m.Attribute); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOperand) validateCapability(formats strfmt.Registry) error {

	if err := validate.Required("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOperand) validateComponent(formats strfmt.Registry) error {

	if err := validate.Required("component", "body", m.Component); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOperand) validateDevices(formats strfmt.Registry) error {

	if err := validate.Required("devices", "body", m.Devices); err != nil {
		return err
	}

	return nil
}

func (m *DeviceOperand) validateTrigger(formats strfmt.Registry) error {

	if swag.IsZero(m.Trigger) { // not required
		return nil
	}

	if err := m.Trigger.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trigger")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceOperand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceOperand) UnmarshalBinary(b []byte) error {
	var res DeviceOperand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
