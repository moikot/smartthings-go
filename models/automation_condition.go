// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutomationCondition automation condition
//
// swagger:model automationCondition
type AutomationCondition struct {
	CapabilityKey

	// Specify the type of UI component to use to display this action or state. The corresponding field must also be included. For example, if you specify "switch" here, you must also include the "switch" key and its object definition for this action or state.
	// Required: true
	// Enum: [slider list numberField textField]
	DisplayType *string `json:"displayType"`

	// The effect used to emphasize this resource widget. The default value is false. If the emphasis value is true and this object has alternatives, a list will appear without a label
	Emphasis bool `json:"emphasis,omitempty"`

	// label
	// Required: true
	Label *string `json:"label"`

	// list
	List *ListForAutomationCondition `json:"list,omitempty"`

	// number field
	NumberField *NumberFieldForAutomationCondition `json:"numberField,omitempty"`

	// slider
	Slider *SliderForAutomationCondition `json:"slider,omitempty"`

	// text field
	TextField *TextFieldForAutomationCondition `json:"textField,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AutomationCondition) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CapabilityKey
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CapabilityKey = aO0

	// AO1
	var dataAO1 struct {
		DisplayType *string `json:"displayType"`

		Emphasis bool `json:"emphasis,omitempty"`

		Label *string `json:"label"`

		List *ListForAutomationCondition `json:"list,omitempty"`

		NumberField *NumberFieldForAutomationCondition `json:"numberField,omitempty"`

		Slider *SliderForAutomationCondition `json:"slider,omitempty"`

		TextField *TextFieldForAutomationCondition `json:"textField,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DisplayType = dataAO1.DisplayType

	m.Emphasis = dataAO1.Emphasis

	m.Label = dataAO1.Label

	m.List = dataAO1.List

	m.NumberField = dataAO1.NumberField

	m.Slider = dataAO1.Slider

	m.TextField = dataAO1.TextField

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AutomationCondition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CapabilityKey)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		DisplayType *string `json:"displayType"`

		Emphasis bool `json:"emphasis,omitempty"`

		Label *string `json:"label"`

		List *ListForAutomationCondition `json:"list,omitempty"`

		NumberField *NumberFieldForAutomationCondition `json:"numberField,omitempty"`

		Slider *SliderForAutomationCondition `json:"slider,omitempty"`

		TextField *TextFieldForAutomationCondition `json:"textField,omitempty"`
	}

	dataAO1.DisplayType = m.DisplayType

	dataAO1.Emphasis = m.Emphasis

	dataAO1.Label = m.Label

	dataAO1.List = m.List

	dataAO1.NumberField = m.NumberField

	dataAO1.Slider = m.Slider

	dataAO1.TextField = m.TextField

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this automation condition
func (m *AutomationCondition) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CapabilityKey
	if err := m.CapabilityKey.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var automationConditionTypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["slider","list","numberField","textField"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		automationConditionTypeDisplayTypePropEnum = append(automationConditionTypeDisplayTypePropEnum, v)
	}
}

// property enum
func (m *AutomationCondition) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, automationConditionTypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AutomationCondition) validateDisplayType(formats strfmt.Registry) error {

	if err := validate.Required("displayType", "body", m.DisplayType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisplayTypeEnum("displayType", "body", *m.DisplayType); err != nil {
		return err
	}

	return nil
}

func (m *AutomationCondition) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *AutomationCondition) validateList(formats strfmt.Registry) error {

	if swag.IsZero(m.List) { // not required
		return nil
	}

	if m.List != nil {
		if err := m.List.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("list")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationCondition) validateNumberField(formats strfmt.Registry) error {

	if swag.IsZero(m.NumberField) { // not required
		return nil
	}

	if m.NumberField != nil {
		if err := m.NumberField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberField")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationCondition) validateSlider(formats strfmt.Registry) error {

	if swag.IsZero(m.Slider) { // not required
		return nil
	}

	if m.Slider != nil {
		if err := m.Slider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slider")
			}
			return err
		}
	}

	return nil
}

func (m *AutomationCondition) validateTextField(formats strfmt.Registry) error {

	if swag.IsZero(m.TextField) { // not required
		return nil
	}

	if m.TextField != nil {
		if err := m.TextField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textField")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutomationCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutomationCondition) UnmarshalBinary(b []byte) error {
	var res AutomationCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
