// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AutomationListItem automation list item
//
// swagger:model automationListItem
type AutomationListItem struct {
	AutomationCondition

	// component
	Component Component `json:"component,omitempty"`

	// To exclude specified automation in `exclude` when this item is selected by the user.
	Exclusion []*ExcludedConditionItem `json:"exclusion"`

	// visible condition
	VisibleCondition *VisibleCondition `json:"visibleCondition,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AutomationListItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AutomationCondition
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AutomationCondition = aO0

	// AO1
	var dataAO1 struct {
		Component Component `json:"component,omitempty"`

		Exclusion []*ExcludedConditionItem `json:"exclusion"`

		VisibleCondition *VisibleCondition `json:"visibleCondition,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Component = dataAO1.Component

	m.Exclusion = dataAO1.Exclusion

	m.VisibleCondition = dataAO1.VisibleCondition

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AutomationListItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AutomationCondition)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Component Component `json:"component,omitempty"`

		Exclusion []*ExcludedConditionItem `json:"exclusion"`

		VisibleCondition *VisibleCondition `json:"visibleCondition,omitempty"`
	}

	dataAO1.Component = m.Component

	dataAO1.Exclusion = m.Exclusion

	dataAO1.VisibleCondition = m.VisibleCondition

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this automation list item
func (m *AutomationListItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AutomationCondition
	if err := m.AutomationCondition.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclusion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibleCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutomationListItem) validateComponent(formats strfmt.Registry) error {

	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if err := m.Component.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("component")
		}
		return err
	}

	return nil
}

func (m *AutomationListItem) validateExclusion(formats strfmt.Registry) error {

	if swag.IsZero(m.Exclusion) { // not required
		return nil
	}

	for i := 0; i < len(m.Exclusion); i++ {
		if swag.IsZero(m.Exclusion[i]) { // not required
			continue
		}

		if m.Exclusion[i] != nil {
			if err := m.Exclusion[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusion" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AutomationListItem) validateVisibleCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.VisibleCondition) { // not required
		return nil
	}

	if m.VisibleCondition != nil {
		if err := m.VisibleCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibleCondition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutomationListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutomationListItem) UnmarshalBinary(b []byte) error {
	var res AutomationListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
