// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PredefinedMessage Predefined message options. Variables from `localeVariables` matching the locale of the Message will be assigned
// first, then `defaultVariables`.
//
//
// swagger:model PredefinedMessage
type PredefinedMessage struct {

	// A map<string,string> with the key representing the variable name, and the value representing the verbiage
	// to be replaced in template string. `defaultVariables` are only used when there are no matching
	// `localeVariables`.
	//
	DefaultVariables map[string]string `json:"defaultVariables,omitempty"`

	// Variables to resolve for specific locales.
	//
	LocaleVariables []*LocaleVariables `json:"localeVariables"`

	// message template key
	// Required: true
	MessageTemplateKey *string `json:"messageTemplateKey"`
}

// Validate validates this predefined message
func (m *PredefinedMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocaleVariables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageTemplateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredefinedMessage) validateLocaleVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.LocaleVariables) { // not required
		return nil
	}

	for i := 0; i < len(m.LocaleVariables); i++ {
		if swag.IsZero(m.LocaleVariables[i]) { // not required
			continue
		}

		if m.LocaleVariables[i] != nil {
			if err := m.LocaleVariables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("localeVariables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PredefinedMessage) validateMessageTemplateKey(formats strfmt.Registry) error {

	if err := validate.Required("messageTemplateKey", "body", m.MessageTemplateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PredefinedMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PredefinedMessage) UnmarshalBinary(b []byte) error {
	var res PredefinedMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
