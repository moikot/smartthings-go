// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IsaResults isa results
//
// swagger:model IsaResults
type IsaResults struct {

	// Viper connector name given by partner eg Lifx (Connect)
	// Required: true
	AppName *string `json:"appName"`

	// url of partner icon
	// Required: true
	Icon *string `json:"icon"`

	// url of partner icon in 2x dimensions
	// Required: true
	Icon2x *string `json:"icon2x"`

	// url of partner icon in 3x dimensions
	// Required: true
	Icon3x *string `json:"icon3x"`

	// isaId installed for the user
	// Required: true
	IsaID *string `json:"isaId"`

	// location of the installed smart app
	// Required: true
	LocationID *string `json:"locationId"`

	// Parnter name eg Lifx Inc
	// Required: true
	PartnerName *string `json:"partnerName"`

	// connection status between partner and ST platform
	// Required: true
	// Enum: [connected disconnected]
	PartnerSTConnection *string `json:"partnerSTConnection"`
}

// Validate validates this isa results
func (m *IsaResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcon2x(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcon3x(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsaID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartnerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartnerSTConnection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IsaResults) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("appName", "body", m.AppName); err != nil {
		return err
	}

	return nil
}

func (m *IsaResults) validateIcon(formats strfmt.Registry) error {

	if err := validate.Required("icon", "body", m.Icon); err != nil {
		return err
	}

	return nil
}

func (m *IsaResults) validateIcon2x(formats strfmt.Registry) error {

	if err := validate.Required("icon2x", "body", m.Icon2x); err != nil {
		return err
	}

	return nil
}

func (m *IsaResults) validateIcon3x(formats strfmt.Registry) error {

	if err := validate.Required("icon3x", "body", m.Icon3x); err != nil {
		return err
	}

	return nil
}

func (m *IsaResults) validateIsaID(formats strfmt.Registry) error {

	if err := validate.Required("isaId", "body", m.IsaID); err != nil {
		return err
	}

	return nil
}

func (m *IsaResults) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("locationId", "body", m.LocationID); err != nil {
		return err
	}

	return nil
}

func (m *IsaResults) validatePartnerName(formats strfmt.Registry) error {

	if err := validate.Required("partnerName", "body", m.PartnerName); err != nil {
		return err
	}

	return nil
}

var isaResultsTypePartnerSTConnectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connected","disconnected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		isaResultsTypePartnerSTConnectionPropEnum = append(isaResultsTypePartnerSTConnectionPropEnum, v)
	}
}

const (

	// IsaResultsPartnerSTConnectionConnected captures enum value "connected"
	IsaResultsPartnerSTConnectionConnected string = "connected"

	// IsaResultsPartnerSTConnectionDisconnected captures enum value "disconnected"
	IsaResultsPartnerSTConnectionDisconnected string = "disconnected"
)

// prop value enum
func (m *IsaResults) validatePartnerSTConnectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, isaResultsTypePartnerSTConnectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IsaResults) validatePartnerSTConnection(formats strfmt.Registry) error {

	if err := validate.Required("partnerSTConnection", "body", m.PartnerSTConnection); err != nil {
		return err
	}

	// value enum
	if err := m.validatePartnerSTConnectionEnum("partnerSTConnection", "body", *m.PartnerSTConnection); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IsaResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IsaResults) UnmarshalBinary(b []byte) error {
	var res IsaResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
