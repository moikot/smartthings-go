// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDevicesParams creates a new GetDevicesParams object
// with the default values initialized.
func NewGetDevicesParams() *GetDevicesParams {
	var (
		capabilitiesModeDefault = string("and")
	)
	return &GetDevicesParams{
		CapabilitiesMode: &capabilitiesModeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDevicesParamsWithTimeout creates a new GetDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDevicesParamsWithTimeout(timeout time.Duration) *GetDevicesParams {
	var (
		capabilitiesModeDefault = string("and")
	)
	return &GetDevicesParams{
		CapabilitiesMode: &capabilitiesModeDefault,

		timeout: timeout,
	}
}

// NewGetDevicesParamsWithContext creates a new GetDevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDevicesParamsWithContext(ctx context.Context) *GetDevicesParams {
	var (
		capabilitiesModeDefault = string("and")
	)
	return &GetDevicesParams{
		CapabilitiesMode: &capabilitiesModeDefault,

		Context: ctx,
	}
}

// NewGetDevicesParamsWithHTTPClient creates a new GetDevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDevicesParamsWithHTTPClient(client *http.Client) *GetDevicesParams {
	var (
		capabilitiesModeDefault = string("and")
	)
	return &GetDevicesParams{
		CapabilitiesMode: &capabilitiesModeDefault,
		HTTPClient:       client,
	}
}

/*GetDevicesParams contains all the parameters to send to the API endpoint
for the get devices operation typically these are written to a http.Request
*/
type GetDevicesParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*AccessLevel
	  Only list devices accessible by the given accessLevel.


	*/
	AccessLevel *int64
	/*CapabilitiesMode
	  Treat all capability filter query params as a logical "or" or "and" with a default of "and".


	*/
	CapabilitiesMode *string
	/*Capability
	  The device capabilities to filter the results by.
	The capabilities are treated as an "and" so all capabilities must be present.


	*/
	Capability []string
	/*DeviceID
	  The device ids to filter the results by.


	*/
	DeviceID []string
	/*IncludeRestricted
	  Restricted devices are hidden by default. This query parameter will reveal them. Device status will
	not be provided if the token does not have sufficient access level to view the device status even
	if includeStatus parameter is set to true.


	*/
	IncludeRestricted *bool
	/*LocationID
	  The device locations to filter the results by.


	*/
	LocationID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get devices params
func (o *GetDevicesParams) WithTimeout(timeout time.Duration) *GetDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get devices params
func (o *GetDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get devices params
func (o *GetDevicesParams) WithContext(ctx context.Context) *GetDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get devices params
func (o *GetDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get devices params
func (o *GetDevicesParams) WithHTTPClient(client *http.Client) *GetDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get devices params
func (o *GetDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get devices params
func (o *GetDevicesParams) WithAuthorization(authorization string) *GetDevicesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get devices params
func (o *GetDevicesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAccessLevel adds the accessLevel to the get devices params
func (o *GetDevicesParams) WithAccessLevel(accessLevel *int64) *GetDevicesParams {
	o.SetAccessLevel(accessLevel)
	return o
}

// SetAccessLevel adds the accessLevel to the get devices params
func (o *GetDevicesParams) SetAccessLevel(accessLevel *int64) {
	o.AccessLevel = accessLevel
}

// WithCapabilitiesMode adds the capabilitiesMode to the get devices params
func (o *GetDevicesParams) WithCapabilitiesMode(capabilitiesMode *string) *GetDevicesParams {
	o.SetCapabilitiesMode(capabilitiesMode)
	return o
}

// SetCapabilitiesMode adds the capabilitiesMode to the get devices params
func (o *GetDevicesParams) SetCapabilitiesMode(capabilitiesMode *string) {
	o.CapabilitiesMode = capabilitiesMode
}

// WithCapability adds the capability to the get devices params
func (o *GetDevicesParams) WithCapability(capability []string) *GetDevicesParams {
	o.SetCapability(capability)
	return o
}

// SetCapability adds the capability to the get devices params
func (o *GetDevicesParams) SetCapability(capability []string) {
	o.Capability = capability
}

// WithDeviceID adds the deviceID to the get devices params
func (o *GetDevicesParams) WithDeviceID(deviceID []string) *GetDevicesParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get devices params
func (o *GetDevicesParams) SetDeviceID(deviceID []string) {
	o.DeviceID = deviceID
}

// WithIncludeRestricted adds the includeRestricted to the get devices params
func (o *GetDevicesParams) WithIncludeRestricted(includeRestricted *bool) *GetDevicesParams {
	o.SetIncludeRestricted(includeRestricted)
	return o
}

// SetIncludeRestricted adds the includeRestricted to the get devices params
func (o *GetDevicesParams) SetIncludeRestricted(includeRestricted *bool) {
	o.IncludeRestricted = includeRestricted
}

// WithLocationID adds the locationID to the get devices params
func (o *GetDevicesParams) WithLocationID(locationID []string) *GetDevicesParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the get devices params
func (o *GetDevicesParams) SetLocationID(locationID []string) {
	o.LocationID = locationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.AccessLevel != nil {

		// query param accessLevel
		var qrAccessLevel int64
		if o.AccessLevel != nil {
			qrAccessLevel = *o.AccessLevel
		}
		qAccessLevel := swag.FormatInt64(qrAccessLevel)
		if qAccessLevel != "" {
			if err := r.SetQueryParam("accessLevel", qAccessLevel); err != nil {
				return err
			}
		}

	}

	if o.CapabilitiesMode != nil {

		// query param capabilitiesMode
		var qrCapabilitiesMode string
		if o.CapabilitiesMode != nil {
			qrCapabilitiesMode = *o.CapabilitiesMode
		}
		qCapabilitiesMode := qrCapabilitiesMode
		if qCapabilitiesMode != "" {
			if err := r.SetQueryParam("capabilitiesMode", qCapabilitiesMode); err != nil {
				return err
			}
		}

	}

	valuesCapability := o.Capability

	joinedCapability := swag.JoinByFormat(valuesCapability, "multi")
	// query array param capability
	if err := r.SetQueryParam("capability", joinedCapability...); err != nil {
		return err
	}

	valuesDeviceID := o.DeviceID

	joinedDeviceID := swag.JoinByFormat(valuesDeviceID, "multi")
	// query array param deviceId
	if err := r.SetQueryParam("deviceId", joinedDeviceID...); err != nil {
		return err
	}

	if o.IncludeRestricted != nil {

		// query param includeRestricted
		var qrIncludeRestricted bool
		if o.IncludeRestricted != nil {
			qrIncludeRestricted = *o.IncludeRestricted
		}
		qIncludeRestricted := swag.FormatBool(qrIncludeRestricted)
		if qIncludeRestricted != "" {
			if err := r.SetQueryParam("includeRestricted", qIncludeRestricted); err != nil {
				return err
			}
		}

	}

	valuesLocationID := o.LocationID

	joinedLocationID := swag.JoinByFormat(valuesLocationID, "multi")
	// query array param locationId
	if err := r.SetQueryParam("locationId", joinedLocationID...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
