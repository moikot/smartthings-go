// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SceneRequest JSON body for creating or updating a Scene
//
// swagger:model SceneRequest
type SceneRequest struct {

	// List of device group actions
	Devicegroups []*SceneDeviceGroupRequest `json:"devicegroups"`

	// Non-sequential list of device actions
	// Required: true
	Devices []*SceneDeviceRequest `json:"devices"`

	// mode
	Mode *SceneModeRequest `json:"mode,omitempty"`

	// The color of the icon
	SceneColor string `json:"sceneColor,omitempty"`

	// The name of the icon
	SceneIcon string `json:"sceneIcon,omitempty"`

	// The user-defined name of the Scene
	// Required: true
	SceneName *string `json:"sceneName"`

	// security mode
	SecurityMode *SceneSecurityModeRequest `json:"securityMode,omitempty"`

	// List of parallel action sequences
	Sequences []SceneActionSequence `json:"sequences"`
}

// Validate validates this scene request
func (m *SceneRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevicegroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSceneName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SceneRequest) validateDevicegroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Devicegroups) { // not required
		return nil
	}

	for i := 0; i < len(m.Devicegroups); i++ {
		if swag.IsZero(m.Devicegroups[i]) { // not required
			continue
		}

		if m.Devicegroups[i] != nil {
			if err := m.Devicegroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devicegroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SceneRequest) validateDevices(formats strfmt.Registry) error {

	if err := validate.Required("devices", "body", m.Devices); err != nil {
		return err
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SceneRequest) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *SceneRequest) validateSceneName(formats strfmt.Registry) error {

	if err := validate.Required("sceneName", "body", m.SceneName); err != nil {
		return err
	}

	return nil
}

func (m *SceneRequest) validateSecurityMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityMode) { // not required
		return nil
	}

	if m.SecurityMode != nil {
		if err := m.SecurityMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityMode")
			}
			return err
		}
	}

	return nil
}

func (m *SceneRequest) validateSequences(formats strfmt.Registry) error {

	if swag.IsZero(m.Sequences) { // not required
		return nil
	}

	for i := 0; i < len(m.Sequences); i++ {

		if err := m.Sequences[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sequences" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SceneRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SceneRequest) UnmarshalBinary(b []byte) error {
	var res SceneRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
