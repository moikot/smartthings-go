// Code generated by go-swagger; DO NOT EDIT.

package rooms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteRoomParams creates a new DeleteRoomParams object
// with the default values initialized.
func NewDeleteRoomParams() *DeleteRoomParams {
	var ()
	return &DeleteRoomParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRoomParamsWithTimeout creates a new DeleteRoomParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRoomParamsWithTimeout(timeout time.Duration) *DeleteRoomParams {
	var ()
	return &DeleteRoomParams{

		timeout: timeout,
	}
}

// NewDeleteRoomParamsWithContext creates a new DeleteRoomParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRoomParamsWithContext(ctx context.Context) *DeleteRoomParams {
	var ()
	return &DeleteRoomParams{

		Context: ctx,
	}
}

// NewDeleteRoomParamsWithHTTPClient creates a new DeleteRoomParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRoomParamsWithHTTPClient(client *http.Client) *DeleteRoomParams {
	var ()
	return &DeleteRoomParams{
		HTTPClient: client,
	}
}

/*DeleteRoomParams contains all the parameters to send to the API endpoint
for the delete room operation typically these are written to a http.Request
*/
type DeleteRoomParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*LocationID
	  The ID of the location.

	*/
	LocationID string
	/*RoomID
	  The ID of the room.

	*/
	RoomID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete room params
func (o *DeleteRoomParams) WithTimeout(timeout time.Duration) *DeleteRoomParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete room params
func (o *DeleteRoomParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete room params
func (o *DeleteRoomParams) WithContext(ctx context.Context) *DeleteRoomParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete room params
func (o *DeleteRoomParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete room params
func (o *DeleteRoomParams) WithHTTPClient(client *http.Client) *DeleteRoomParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete room params
func (o *DeleteRoomParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the delete room params
func (o *DeleteRoomParams) WithAuthorization(authorization string) *DeleteRoomParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the delete room params
func (o *DeleteRoomParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithLocationID adds the locationID to the delete room params
func (o *DeleteRoomParams) WithLocationID(locationID string) *DeleteRoomParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the delete room params
func (o *DeleteRoomParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithRoomID adds the roomID to the delete room params
func (o *DeleteRoomParams) WithRoomID(roomID string) *DeleteRoomParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the delete room params
func (o *DeleteRoomParams) SetRoomID(roomID string) {
	o.RoomID = roomID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRoomParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// path param roomId
	if err := r.SetPathParam("roomId", o.RoomID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
