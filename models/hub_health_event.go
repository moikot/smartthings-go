// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HubHealthEvent An event that represents a change in the health of a hub.
//
// swagger:model HubHealthEvent
type HubHealthEvent struct {

	// The id of the event.
	EventID string `json:"eventId,omitempty"`

	// The id of the hub.
	HubID string `json:"hubId,omitempty"`

	// The id of the location in which the event was triggered.
	LocationID string `json:"locationId,omitempty"`

	// The reason the hub is offline.
	//
	// Enum: [NONE DISCONNECTED INACTIVE]
	Reason string `json:"reason,omitempty"`

	// The status of the hub.
	//
	// Enum: [OFFLINE ONLINE ZWAVE_OFFLINE ZWAVE_ONLINE ZIGBEE_OFFLINE ZIGBEE_ONLINE BLUETOOTH_OFFLINE BLUETOOTH_ONLINE]
	Status string `json:"status,omitempty"`
}

// Validate validates this hub health event
func (m *HubHealthEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hubHealthEventTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","DISCONNECTED","INACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hubHealthEventTypeReasonPropEnum = append(hubHealthEventTypeReasonPropEnum, v)
	}
}

const (

	// HubHealthEventReasonNONE captures enum value "NONE"
	HubHealthEventReasonNONE string = "NONE"

	// HubHealthEventReasonDISCONNECTED captures enum value "DISCONNECTED"
	HubHealthEventReasonDISCONNECTED string = "DISCONNECTED"

	// HubHealthEventReasonINACTIVE captures enum value "INACTIVE"
	HubHealthEventReasonINACTIVE string = "INACTIVE"
)

// prop value enum
func (m *HubHealthEvent) validateReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hubHealthEventTypeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HubHealthEvent) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

var hubHealthEventTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OFFLINE","ONLINE","ZWAVE_OFFLINE","ZWAVE_ONLINE","ZIGBEE_OFFLINE","ZIGBEE_ONLINE","BLUETOOTH_OFFLINE","BLUETOOTH_ONLINE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hubHealthEventTypeStatusPropEnum = append(hubHealthEventTypeStatusPropEnum, v)
	}
}

const (

	// HubHealthEventStatusOFFLINE captures enum value "OFFLINE"
	HubHealthEventStatusOFFLINE string = "OFFLINE"

	// HubHealthEventStatusONLINE captures enum value "ONLINE"
	HubHealthEventStatusONLINE string = "ONLINE"

	// HubHealthEventStatusZWAVEOFFLINE captures enum value "ZWAVE_OFFLINE"
	HubHealthEventStatusZWAVEOFFLINE string = "ZWAVE_OFFLINE"

	// HubHealthEventStatusZWAVEONLINE captures enum value "ZWAVE_ONLINE"
	HubHealthEventStatusZWAVEONLINE string = "ZWAVE_ONLINE"

	// HubHealthEventStatusZIGBEEOFFLINE captures enum value "ZIGBEE_OFFLINE"
	HubHealthEventStatusZIGBEEOFFLINE string = "ZIGBEE_OFFLINE"

	// HubHealthEventStatusZIGBEEONLINE captures enum value "ZIGBEE_ONLINE"
	HubHealthEventStatusZIGBEEONLINE string = "ZIGBEE_ONLINE"

	// HubHealthEventStatusBLUETOOTHOFFLINE captures enum value "BLUETOOTH_OFFLINE"
	HubHealthEventStatusBLUETOOTHOFFLINE string = "BLUETOOTH_OFFLINE"

	// HubHealthEventStatusBLUETOOTHONLINE captures enum value "BLUETOOTH_ONLINE"
	HubHealthEventStatusBLUETOOTHONLINE string = "BLUETOOTH_ONLINE"
)

// prop value enum
func (m *HubHealthEvent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, hubHealthEventTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HubHealthEvent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HubHealthEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HubHealthEvent) UnmarshalBinary(b []byte) error {
	var res HubHealthEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
