// Code generated by go-swagger; DO NOT EDIT.

package presentations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGenerateDeviceConfigParams creates a new GenerateDeviceConfigParams object
// with the default values initialized.
func NewGenerateDeviceConfigParams() *GenerateDeviceConfigParams {
	var (
		typeIntegrationDefault = string("profile")
	)
	return &GenerateDeviceConfigParams{
		TypeIntegration: &typeIntegrationDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateDeviceConfigParamsWithTimeout creates a new GenerateDeviceConfigParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGenerateDeviceConfigParamsWithTimeout(timeout time.Duration) *GenerateDeviceConfigParams {
	var (
		typeIntegrationDefault = string("profile")
	)
	return &GenerateDeviceConfigParams{
		TypeIntegration: &typeIntegrationDefault,

		timeout: timeout,
	}
}

// NewGenerateDeviceConfigParamsWithContext creates a new GenerateDeviceConfigParams object
// with the default values initialized, and the ability to set a context for a request
func NewGenerateDeviceConfigParamsWithContext(ctx context.Context) *GenerateDeviceConfigParams {
	var (
		typeIntegrationDefault = string("profile")
	)
	return &GenerateDeviceConfigParams{
		TypeIntegration: &typeIntegrationDefault,

		Context: ctx,
	}
}

// NewGenerateDeviceConfigParamsWithHTTPClient creates a new GenerateDeviceConfigParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGenerateDeviceConfigParamsWithHTTPClient(client *http.Client) *GenerateDeviceConfigParams {
	var (
		typeIntegrationDefault = string("profile")
	)
	return &GenerateDeviceConfigParams{
		TypeIntegration: &typeIntegrationDefault,
		HTTPClient:      client,
	}
}

/*GenerateDeviceConfigParams contains all the parameters to send to the API endpoint
for the generate device config operation typically these are written to a http.Request
*/
type GenerateDeviceConfigParams struct {

	/*Authorization
	  OAuth token

	*/
	Authorization string
	/*TypeIntegration
	  Represents the way that the provided device type is formatted, either in the form of a "dth" or a "profile"

	*/
	TypeIntegration *string
	/*TypeIntegrationID
	  Device Profile or DTH ID. Assumes profile if the typeIntegration parameter is not set.

	*/
	TypeIntegrationID string
	/*TypeShardID
	  Data Management Shard ID where the device type resides. Only useful for `DTH` type integrations. Example: `na04`

	*/
	TypeShardID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the generate device config params
func (o *GenerateDeviceConfigParams) WithTimeout(timeout time.Duration) *GenerateDeviceConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate device config params
func (o *GenerateDeviceConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate device config params
func (o *GenerateDeviceConfigParams) WithContext(ctx context.Context) *GenerateDeviceConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate device config params
func (o *GenerateDeviceConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate device config params
func (o *GenerateDeviceConfigParams) WithHTTPClient(client *http.Client) *GenerateDeviceConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate device config params
func (o *GenerateDeviceConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the generate device config params
func (o *GenerateDeviceConfigParams) WithAuthorization(authorization string) *GenerateDeviceConfigParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the generate device config params
func (o *GenerateDeviceConfigParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithTypeIntegration adds the typeIntegration to the generate device config params
func (o *GenerateDeviceConfigParams) WithTypeIntegration(typeIntegration *string) *GenerateDeviceConfigParams {
	o.SetTypeIntegration(typeIntegration)
	return o
}

// SetTypeIntegration adds the typeIntegration to the generate device config params
func (o *GenerateDeviceConfigParams) SetTypeIntegration(typeIntegration *string) {
	o.TypeIntegration = typeIntegration
}

// WithTypeIntegrationID adds the typeIntegrationID to the generate device config params
func (o *GenerateDeviceConfigParams) WithTypeIntegrationID(typeIntegrationID string) *GenerateDeviceConfigParams {
	o.SetTypeIntegrationID(typeIntegrationID)
	return o
}

// SetTypeIntegrationID adds the typeIntegrationId to the generate device config params
func (o *GenerateDeviceConfigParams) SetTypeIntegrationID(typeIntegrationID string) {
	o.TypeIntegrationID = typeIntegrationID
}

// WithTypeShardID adds the typeShardID to the generate device config params
func (o *GenerateDeviceConfigParams) WithTypeShardID(typeShardID *string) *GenerateDeviceConfigParams {
	o.SetTypeShardID(typeShardID)
	return o
}

// SetTypeShardID adds the typeShardId to the generate device config params
func (o *GenerateDeviceConfigParams) SetTypeShardID(typeShardID *string) {
	o.TypeShardID = typeShardID
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateDeviceConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.TypeIntegration != nil {

		// query param typeIntegration
		var qrTypeIntegration string
		if o.TypeIntegration != nil {
			qrTypeIntegration = *o.TypeIntegration
		}
		qTypeIntegration := qrTypeIntegration
		if qTypeIntegration != "" {
			if err := r.SetQueryParam("typeIntegration", qTypeIntegration); err != nil {
				return err
			}
		}

	}

	// path param typeIntegrationId
	if err := r.SetPathParam("typeIntegrationId", o.TypeIntegrationID); err != nil {
		return err
	}

	if o.TypeShardID != nil {

		// query param typeShardId
		var qrTypeShardID string
		if o.TypeShardID != nil {
			qrTypeShardID = *o.TypeShardID
		}
		qTypeShardID := qrTypeShardID
		if qTypeShardID != "" {
			if err := r.SetQueryParam("typeShardId", qTypeShardID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
