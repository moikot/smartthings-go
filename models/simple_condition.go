// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimpleCondition simple condition
//
// swagger:model SimpleCondition
type SimpleCondition struct {

	// aggregation
	Aggregation ConditionAggregationMode `json:"aggregation,omitempty"`

	// left
	// Required: true
	Left *Operand `json:"left"`

	// right
	// Required: true
	Right *Operand `json:"right"`
}

// Validate validates this simple condition
func (m *SimpleCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimpleCondition) validateAggregation(formats strfmt.Registry) error {

	if swag.IsZero(m.Aggregation) { // not required
		return nil
	}

	if err := m.Aggregation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aggregation")
		}
		return err
	}

	return nil
}

func (m *SimpleCondition) validateLeft(formats strfmt.Registry) error {

	if err := validate.Required("left", "body", m.Left); err != nil {
		return err
	}

	if m.Left != nil {
		if err := m.Left.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("left")
			}
			return err
		}
	}

	return nil
}

func (m *SimpleCondition) validateRight(formats strfmt.Registry) error {

	if err := validate.Required("right", "body", m.Right); err != nil {
		return err
	}

	if m.Right != nil {
		if err := m.Right.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("right")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimpleCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimpleCondition) UnmarshalBinary(b []byte) error {
	var res SimpleCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
