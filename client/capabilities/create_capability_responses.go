// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/moikot/smartthings-go/models"
)

// CreateCapabilityReader is a Reader for the CreateCapability structure.
type CreateCapabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateCapabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateCapabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateCapabilityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateCapabilityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateCapabilityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateCapabilityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateCapabilityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateCapabilityOK creates a CreateCapabilityOK with default headers values
func NewCreateCapabilityOK() *CreateCapabilityOK {
	return &CreateCapabilityOK{}
}

/*CreateCapabilityOK handles this case with default header values.

The custom capability
*/
type CreateCapabilityOK struct {
	/*Maximum requests allowed within the rate limit window.
	 */
	XRateLimitLimit int64
	/*Remaining requests available within the window.
	 */
	XRateLimitRemaining int64
	/*Time in milliseconds until the current window expires.
	 */
	XRateLimitReset int64

	Payload *models.Capability
}

func (o *CreateCapabilityOK) Error() string {
	return fmt.Sprintf("[POST /capabilities][%d] createCapabilityOK  %+v", 200, o.Payload)
}

func (o *CreateCapabilityOK) GetPayload() *models.Capability {
	return o.Payload
}

func (o *CreateCapabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-Reset
	xRateLimitReset, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Reset"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Reset", "header", "int64", response.GetHeader("X-RateLimit-Reset"))
	}
	o.XRateLimitReset = xRateLimitReset

	o.Payload = new(models.Capability)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCapabilityUnauthorized creates a CreateCapabilityUnauthorized with default headers values
func NewCreateCapabilityUnauthorized() *CreateCapabilityUnauthorized {
	return &CreateCapabilityUnauthorized{}
}

/*CreateCapabilityUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateCapabilityUnauthorized struct {
}

func (o *CreateCapabilityUnauthorized) Error() string {
	return fmt.Sprintf("[POST /capabilities][%d] createCapabilityUnauthorized ", 401)
}

func (o *CreateCapabilityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCapabilityForbidden creates a CreateCapabilityForbidden with default headers values
func NewCreateCapabilityForbidden() *CreateCapabilityForbidden {
	return &CreateCapabilityForbidden{}
}

/*CreateCapabilityForbidden handles this case with default header values.

Forbidden
*/
type CreateCapabilityForbidden struct {
}

func (o *CreateCapabilityForbidden) Error() string {
	return fmt.Sprintf("[POST /capabilities][%d] createCapabilityForbidden ", 403)
}

func (o *CreateCapabilityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCapabilityNotFound creates a CreateCapabilityNotFound with default headers values
func NewCreateCapabilityNotFound() *CreateCapabilityNotFound {
	return &CreateCapabilityNotFound{}
}

/*CreateCapabilityNotFound handles this case with default header values.

Not found
*/
type CreateCapabilityNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CreateCapabilityNotFound) Error() string {
	return fmt.Sprintf("[POST /capabilities][%d] createCapabilityNotFound  %+v", 404, o.Payload)
}

func (o *CreateCapabilityNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateCapabilityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCapabilityTooManyRequests creates a CreateCapabilityTooManyRequests with default headers values
func NewCreateCapabilityTooManyRequests() *CreateCapabilityTooManyRequests {
	return &CreateCapabilityTooManyRequests{}
}

/*CreateCapabilityTooManyRequests handles this case with default header values.

Too many requests
*/
type CreateCapabilityTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *CreateCapabilityTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /capabilities][%d] createCapabilityTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateCapabilityTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateCapabilityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCapabilityDefault creates a CreateCapabilityDefault with default headers values
func NewCreateCapabilityDefault(code int) *CreateCapabilityDefault {
	return &CreateCapabilityDefault{
		_statusCode: code,
	}
}

/*CreateCapabilityDefault handles this case with default header values.

Unexpected error
*/
type CreateCapabilityDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the create capability default response
func (o *CreateCapabilityDefault) Code() int {
	return o._statusCode
}

func (o *CreateCapabilityDefault) Error() string {
	return fmt.Sprintf("[POST /capabilities][%d] createCapability default  %+v", o._statusCode, o.Payload)
}

func (o *CreateCapabilityDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateCapabilityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
