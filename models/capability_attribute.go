// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CapabilityAttribute capability attribute
//
// swagger:model CapabilityAttribute
type CapabilityAttribute struct {

	// a list of objects that specify which commands set this attribute
	EnumCommands []*CapabilityAttributeEnumCommandsItems0 `json:"enumCommands"`

	// schema
	Schema *AttributeSchema `json:"schema,omitempty"`

	// The name of the command that sets this attribute
	Setter string `json:"setter,omitempty"`
}

// Validate validates this capability attribute
func (m *CapabilityAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnumCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilityAttribute) validateEnumCommands(formats strfmt.Registry) error {

	if swag.IsZero(m.EnumCommands) { // not required
		return nil
	}

	for i := 0; i < len(m.EnumCommands); i++ {
		if swag.IsZero(m.EnumCommands[i]) { // not required
			continue
		}

		if m.EnumCommands[i] != nil {
			if err := m.EnumCommands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enumCommands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CapabilityAttribute) validateSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityAttribute) UnmarshalBinary(b []byte) error {
	var res CapabilityAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapabilityAttributeEnumCommandsItems0 capability attribute enum commands items0
//
// swagger:model CapabilityAttributeEnumCommandsItems0
type CapabilityAttributeEnumCommandsItems0 struct {

	// the command that sets this attribute to the associated value
	// Required: true
	Command *string `json:"command"`

	// the value that this command will set the attribute to
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this capability attribute enum commands items0
func (m *CapabilityAttributeEnumCommandsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilityAttributeEnumCommandsItems0) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

func (m *CapabilityAttributeEnumCommandsItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilityAttributeEnumCommandsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilityAttributeEnumCommandsItems0) UnmarshalBinary(b []byte) error {
	var res CapabilityAttributeEnumCommandsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
