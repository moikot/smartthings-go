// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Operand operand
//
// swagger:model Operand
type Operand struct {

	// array
	Array *ArrayOperand `json:"array,omitempty"`

	// boolean
	Boolean bool `json:"boolean,omitempty"`

	// date
	Date *DateOperand `json:"date,omitempty"`

	// datetime
	Datetime *DateTimeOperand `json:"datetime,omitempty"`

	// decimal
	Decimal float64 `json:"decimal,omitempty"`

	// device
	Device *DeviceOperand `json:"device,omitempty"`

	// integer
	Integer int64 `json:"integer,omitempty"`

	// location
	Location *LocationOperand `json:"location,omitempty"`

	// map
	Map MapOperand `json:"map,omitempty"`

	// string
	String string `json:"string,omitempty"`

	// time
	Time *TimeOperand `json:"time,omitempty"`
}

// Validate validates this operand
func (m *Operand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operand) validateArray(formats strfmt.Registry) error {

	if swag.IsZero(m.Array) { // not required
		return nil
	}

	if m.Array != nil {
		if err := m.Array.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("array")
			}
			return err
		}
	}

	return nil
}

func (m *Operand) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if m.Date != nil {
		if err := m.Date.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date")
			}
			return err
		}
	}

	return nil
}

func (m *Operand) validateDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.Datetime) { // not required
		return nil
	}

	if m.Datetime != nil {
		if err := m.Datetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datetime")
			}
			return err
		}
	}

	return nil
}

func (m *Operand) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *Operand) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Operand) validateMap(formats strfmt.Registry) error {

	if swag.IsZero(m.Map) { // not required
		return nil
	}

	if err := m.Map.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("map")
		}
		return err
	}

	return nil
}

func (m *Operand) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if m.Time != nil {
		if err := m.Time.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operand) UnmarshalBinary(b []byte) error {
	var res Operand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
