// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/moikot/smartthings-go/models"
)

// RegisterReader is a Reader for the Register structure.
type RegisterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRegisterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRegisterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRegisterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRegisterTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRegisterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRegisterAccepted creates a RegisterAccepted with default headers values
func NewRegisterAccepted() *RegisterAccepted {
	return &RegisterAccepted{}
}

/*RegisterAccepted handles this case with default header values.

A request to send a confirm registration request has been accepted.
*/
type RegisterAccepted struct {
	Payload models.AppRegisterResponse
}

func (o *RegisterAccepted) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/register][%d] registerAccepted  %+v", 202, o.Payload)
}

func (o *RegisterAccepted) GetPayload() models.AppRegisterResponse {
	return o.Payload
}

func (o *RegisterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterBadRequest creates a RegisterBadRequest with default headers values
func NewRegisterBadRequest() *RegisterBadRequest {
	return &RegisterBadRequest{}
}

/*RegisterBadRequest handles this case with default header values.

Bad request
*/
type RegisterBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *RegisterBadRequest) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/register][%d] registerBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RegisterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUnauthorized creates a RegisterUnauthorized with default headers values
func NewRegisterUnauthorized() *RegisterUnauthorized {
	return &RegisterUnauthorized{}
}

/*RegisterUnauthorized handles this case with default header values.

Unauthorized
*/
type RegisterUnauthorized struct {
}

func (o *RegisterUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/register][%d] registerUnauthorized ", 401)
}

func (o *RegisterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterForbidden creates a RegisterForbidden with default headers values
func NewRegisterForbidden() *RegisterForbidden {
	return &RegisterForbidden{}
}

/*RegisterForbidden handles this case with default header values.

Forbidden
*/
type RegisterForbidden struct {
}

func (o *RegisterForbidden) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/register][%d] registerForbidden ", 403)
}

func (o *RegisterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterTooManyRequests creates a RegisterTooManyRequests with default headers values
func NewRegisterTooManyRequests() *RegisterTooManyRequests {
	return &RegisterTooManyRequests{}
}

/*RegisterTooManyRequests handles this case with default header values.

Too many requests
*/
type RegisterTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *RegisterTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/register][%d] registerTooManyRequests  %+v", 429, o.Payload)
}

func (o *RegisterTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RegisterTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterDefault creates a RegisterDefault with default headers values
func NewRegisterDefault(code int) *RegisterDefault {
	return &RegisterDefault{
		_statusCode: code,
	}
}

/*RegisterDefault handles this case with default header values.

Unexpected error
*/
type RegisterDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the register default response
func (o *RegisterDefault) Code() int {
	return o._statusCode
}

func (o *RegisterDefault) Error() string {
	return fmt.Sprintf("[PUT /apps/{appNameOrId}/register][%d] register default  %+v", o._statusCode, o.Payload)
}

func (o *RegisterDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RegisterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
