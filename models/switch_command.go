// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SwitchCommand switch command
//
// swagger:model switchCommand
type SwitchCommand struct {

	// command
	// Required: true
	Command *SwitchCommandCommand `json:"command"`
}

// Validate validates this switch command
func (m *SwitchCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchCommand) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchCommand) UnmarshalBinary(b []byte) error {
	var res SwitchCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwitchCommandCommand To specify separate commands with no arguments for on and off, use the “on” and “off” fields respectively. To specify a single command, use “name” for the command and the “on” and “off” fields for the arguments.
//
// swagger:model SwitchCommandCommand
type SwitchCommandCommand struct {

	// name
	Name string `json:"name,omitempty"`

	// off
	// Required: true
	Off *string `json:"off"`

	// on
	// Required: true
	On *string `json:"on"`
}

// Validate validates this switch command command
func (m *SwitchCommandCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwitchCommandCommand) validateOff(formats strfmt.Registry) error {

	if err := validate.Required("command"+"."+"off", "body", m.Off); err != nil {
		return err
	}

	return nil
}

func (m *SwitchCommandCommand) validateOn(formats strfmt.Registry) error {

	if err := validate.Required("command"+"."+"on", "body", m.On); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwitchCommandCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwitchCommandCommand) UnmarshalBinary(b []byte) error {
	var res SwitchCommandCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
