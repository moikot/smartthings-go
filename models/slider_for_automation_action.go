// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SliderForAutomationAction slider for automation action
//
// swagger:model sliderForAutomationAction
type SliderForAutomationAction struct {
	SliderBase

	// argument type
	ArgumentType ArgumentType `json:"argumentType,omitempty"`

	// command
	// Required: true
	Command *string `json:"command"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SliderForAutomationAction) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SliderBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SliderBase = aO0

	// AO1
	var dataAO1 struct {
		ArgumentType ArgumentType `json:"argumentType,omitempty"`

		Command *string `json:"command"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ArgumentType = dataAO1.ArgumentType

	m.Command = dataAO1.Command

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SliderForAutomationAction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SliderBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ArgumentType ArgumentType `json:"argumentType,omitempty"`

		Command *string `json:"command"`
	}

	dataAO1.ArgumentType = m.ArgumentType

	dataAO1.Command = m.Command

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this slider for automation action
func (m *SliderForAutomationAction) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SliderBase
	if err := m.SliderBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArgumentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SliderForAutomationAction) validateArgumentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ArgumentType) { // not required
		return nil
	}

	if err := m.ArgumentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("argumentType")
		}
		return err
	}

	return nil
}

func (m *SliderForAutomationAction) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SliderForAutomationAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SliderForAutomationAction) UnmarshalBinary(b []byte) error {
	var res SliderForAutomationAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
