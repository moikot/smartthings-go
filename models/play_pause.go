// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlayPause To specify separate commands for play and pause, use the "play" and "pause" fields respectively. To specify a single command, use "name" for the command and the "play" and "pause" fields for the arguments.
//
// swagger:model playPause
type PlayPause struct {
	PlayPauseCommand

	// state
	State *PlayPauseAO1State `json:"state,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PlayPause) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 PlayPauseCommand
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.PlayPauseCommand = aO0

	// AO1
	var dataAO1 struct {
		State *PlayPauseAO1State `json:"state,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.State = dataAO1.State

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PlayPause) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.PlayPauseCommand)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		State *PlayPauseAO1State `json:"state,omitempty"`
	}

	dataAO1.State = m.State

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this play pause
func (m *PlayPause) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PlayPauseCommand
	if err := m.PlayPauseCommand.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayPause) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayPause) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayPause) UnmarshalBinary(b []byte) error {
	var res PlayPause
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PlayPauseAO1State play pause a o1 state
//
// swagger:model PlayPauseAO1State
type PlayPauseAO1State struct {

	// alternatives
	Alternatives Alternatives `json:"alternatives,omitempty"`

	// The value of "attribute" which indicates paused state. When the attribute value equals to this then UI will show paused state.
	// Required: true
	Pause *string `json:"pause"`

	// The value of "attribute" which indicates playing state. When the attribute value equals to this then UI will show playing state.
	// Required: true
	Play *string `json:"play"`

	// value
	// Required: true
	Value Value `json:"value"`
}

// Validate validates this play pause a o1 state
func (m *PlayPauseAO1State) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternatives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayPauseAO1State) validateAlternatives(formats strfmt.Registry) error {

	if swag.IsZero(m.Alternatives) { // not required
		return nil
	}

	if err := m.Alternatives.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state" + "." + "alternatives")
		}
		return err
	}

	return nil
}

func (m *PlayPauseAO1State) validatePause(formats strfmt.Registry) error {

	if err := validate.Required("state"+"."+"pause", "body", m.Pause); err != nil {
		return err
	}

	return nil
}

func (m *PlayPauseAO1State) validatePlay(formats strfmt.Registry) error {

	if err := validate.Required("state"+"."+"play", "body", m.Play); err != nil {
		return err
	}

	return nil
}

func (m *PlayPauseAO1State) validateValue(formats strfmt.Registry) error {

	if err := m.Value.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state" + "." + "value")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayPauseAO1State) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayPauseAO1State) UnmarshalBinary(b []byte) error {
	var res PlayPauseAO1State
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
