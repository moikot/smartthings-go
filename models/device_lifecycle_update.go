// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceLifecycleUpdate Update device lifecycle.
//
//
// swagger:model DeviceLifecycleUpdate
type DeviceLifecycleUpdate struct {

	// component diff
	ComponentDiff *DeviceLifecycleUpdateComponentDiff `json:"componentDiff,omitempty"`

	// label diff
	LabelDiff *DeviceLifecycleUpdateLabelDiff `json:"labelDiff,omitempty"`
}

// Validate validates this device lifecycle update
func (m *DeviceLifecycleUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelDiff(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceLifecycleUpdate) validateComponentDiff(formats strfmt.Registry) error {

	if swag.IsZero(m.ComponentDiff) { // not required
		return nil
	}

	if m.ComponentDiff != nil {
		if err := m.ComponentDiff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentDiff")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceLifecycleUpdate) validateLabelDiff(formats strfmt.Registry) error {

	if swag.IsZero(m.LabelDiff) { // not required
		return nil
	}

	if m.LabelDiff != nil {
		if err := m.LabelDiff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelDiff")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdate) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateComponentDiff device lifecycle update component diff
//
// swagger:model DeviceLifecycleUpdateComponentDiff
type DeviceLifecycleUpdateComponentDiff struct {

	// new
	New *DeviceLifecycleUpdateComponentDiffNew `json:"new,omitempty"`

	// old
	Old *DeviceLifecycleUpdateComponentDiffOld `json:"old,omitempty"`
}

// Validate validates this device lifecycle update component diff
func (m *DeviceLifecycleUpdateComponentDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOld(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceLifecycleUpdateComponentDiff) validateNew(formats strfmt.Registry) error {

	if swag.IsZero(m.New) { // not required
		return nil
	}

	if m.New != nil {
		if err := m.New.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentDiff" + "." + "new")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceLifecycleUpdateComponentDiff) validateOld(formats strfmt.Registry) error {

	if swag.IsZero(m.Old) { // not required
		return nil
	}

	if m.Old != nil {
		if err := m.Old.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentDiff" + "." + "old")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiff) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateComponentDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateComponentDiffNew device lifecycle update component diff new
//
// swagger:model DeviceLifecycleUpdateComponentDiffNew
type DeviceLifecycleUpdateComponentDiffNew struct {

	// capabilities
	Capabilities []*DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0 `json:"capabilities"`

	// categories
	Categories []*DeviceLifecycleUpdateComponentDiffNewCategoriesItems0 `json:"categories"`

	// id
	ID string `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`
}

// Validate validates this device lifecycle update component diff new
func (m *DeviceLifecycleUpdateComponentDiffNew) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceLifecycleUpdateComponentDiffNew) validateCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Capabilities); i++ {
		if swag.IsZero(m.Capabilities[i]) { // not required
			continue
		}

		if m.Capabilities[i] != nil {
			if err := m.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("componentDiff" + "." + "new" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceLifecycleUpdateComponentDiffNew) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("componentDiff" + "." + "new" + "." + "categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffNew) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffNew) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateComponentDiffNew
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0 device lifecycle update component diff new capabilities items0
//
// swagger:model DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0
type DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this device lifecycle update component diff new capabilities items0
func (m *DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateComponentDiffNewCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateComponentDiffNewCategoriesItems0 device lifecycle update component diff new categories items0
//
// swagger:model DeviceLifecycleUpdateComponentDiffNewCategoriesItems0
type DeviceLifecycleUpdateComponentDiffNewCategoriesItems0 struct {

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this device lifecycle update component diff new categories items0
func (m *DeviceLifecycleUpdateComponentDiffNewCategoriesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffNewCategoriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffNewCategoriesItems0) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateComponentDiffNewCategoriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateComponentDiffOld device lifecycle update component diff old
//
// swagger:model DeviceLifecycleUpdateComponentDiffOld
type DeviceLifecycleUpdateComponentDiffOld struct {

	// capabilities
	Capabilities []*DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0 `json:"capabilities"`

	// categories
	Categories []*DeviceLifecycleUpdateComponentDiffOldCategoriesItems0 `json:"categories"`

	// id
	ID string `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`
}

// Validate validates this device lifecycle update component diff old
func (m *DeviceLifecycleUpdateComponentDiffOld) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceLifecycleUpdateComponentDiffOld) validateCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Capabilities); i++ {
		if swag.IsZero(m.Capabilities[i]) { // not required
			continue
		}

		if m.Capabilities[i] != nil {
			if err := m.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("componentDiff" + "." + "old" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceLifecycleUpdateComponentDiffOld) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("componentDiff" + "." + "old" + "." + "categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffOld) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffOld) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateComponentDiffOld
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0 device lifecycle update component diff old capabilities items0
//
// swagger:model DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0
type DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this device lifecycle update component diff old capabilities items0
func (m *DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateComponentDiffOldCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateComponentDiffOldCategoriesItems0 device lifecycle update component diff old categories items0
//
// swagger:model DeviceLifecycleUpdateComponentDiffOldCategoriesItems0
type DeviceLifecycleUpdateComponentDiffOldCategoriesItems0 struct {

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this device lifecycle update component diff old categories items0
func (m *DeviceLifecycleUpdateComponentDiffOldCategoriesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffOldCategoriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateComponentDiffOldCategoriesItems0) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateComponentDiffOldCategoriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceLifecycleUpdateLabelDiff device lifecycle update label diff
//
// swagger:model DeviceLifecycleUpdateLabelDiff
type DeviceLifecycleUpdateLabelDiff struct {

	// new
	New string `json:"new,omitempty"`

	// old
	Old string `json:"old,omitempty"`
}

// Validate validates this device lifecycle update label diff
func (m *DeviceLifecycleUpdateLabelDiff) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceLifecycleUpdateLabelDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceLifecycleUpdateLabelDiff) UnmarshalBinary(b []byte) error {
	var res DeviceLifecycleUpdateLabelDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
