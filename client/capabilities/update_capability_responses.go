// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/moikot/smartthings-go/models"
)

// UpdateCapabilityReader is a Reader for the UpdateCapability structure.
type UpdateCapabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCapabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCapabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCapabilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCapabilityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCapabilityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateCapabilityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateCapabilityUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateCapabilityUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateCapabilityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateCapabilityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateCapabilityOK creates a UpdateCapabilityOK with default headers values
func NewUpdateCapabilityOK() *UpdateCapabilityOK {
	return &UpdateCapabilityOK{}
}

/*UpdateCapabilityOK handles this case with default header values.

The custom capability
*/
type UpdateCapabilityOK struct {
	/*Maximum requests allowed within the rate limit window.
	 */
	XRateLimitLimit int64
	/*Remaining requests available within the window.
	 */
	XRateLimitRemaining int64
	/*Time in milliseconds until the current window expires.
	 */
	XRateLimitReset int64

	Payload *models.Capability
}

func (o *UpdateCapabilityOK) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityOK  %+v", 200, o.Payload)
}

func (o *UpdateCapabilityOK) GetPayload() *models.Capability {
	return o.Payload
}

func (o *UpdateCapabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-Reset
	xRateLimitReset, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Reset"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Reset", "header", "int64", response.GetHeader("X-RateLimit-Reset"))
	}
	o.XRateLimitReset = xRateLimitReset

	o.Payload = new(models.Capability)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityBadRequest creates a UpdateCapabilityBadRequest with default headers values
func NewUpdateCapabilityBadRequest() *UpdateCapabilityBadRequest {
	return &UpdateCapabilityBadRequest{}
}

/*UpdateCapabilityBadRequest handles this case with default header values.

Bad request
*/
type UpdateCapabilityBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *UpdateCapabilityBadRequest) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCapabilityBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateCapabilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityUnauthorized creates a UpdateCapabilityUnauthorized with default headers values
func NewUpdateCapabilityUnauthorized() *UpdateCapabilityUnauthorized {
	return &UpdateCapabilityUnauthorized{}
}

/*UpdateCapabilityUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateCapabilityUnauthorized struct {
}

func (o *UpdateCapabilityUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityUnauthorized ", 401)
}

func (o *UpdateCapabilityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCapabilityForbidden creates a UpdateCapabilityForbidden with default headers values
func NewUpdateCapabilityForbidden() *UpdateCapabilityForbidden {
	return &UpdateCapabilityForbidden{}
}

/*UpdateCapabilityForbidden handles this case with default header values.

Forbidden
*/
type UpdateCapabilityForbidden struct {
}

func (o *UpdateCapabilityForbidden) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityForbidden ", 403)
}

func (o *UpdateCapabilityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCapabilityConflict creates a UpdateCapabilityConflict with default headers values
func NewUpdateCapabilityConflict() *UpdateCapabilityConflict {
	return &UpdateCapabilityConflict{}
}

/*UpdateCapabilityConflict handles this case with default header values.

Conflict
*/
type UpdateCapabilityConflict struct {
	Payload *models.ErrorResponse
}

func (o *UpdateCapabilityConflict) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityConflict  %+v", 409, o.Payload)
}

func (o *UpdateCapabilityConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateCapabilityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityUnsupportedMediaType creates a UpdateCapabilityUnsupportedMediaType with default headers values
func NewUpdateCapabilityUnsupportedMediaType() *UpdateCapabilityUnsupportedMediaType {
	return &UpdateCapabilityUnsupportedMediaType{}
}

/*UpdateCapabilityUnsupportedMediaType handles this case with default header values.

Unsupported Media Type
*/
type UpdateCapabilityUnsupportedMediaType struct {
	Payload *models.ErrorResponse
}

func (o *UpdateCapabilityUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateCapabilityUnsupportedMediaType) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateCapabilityUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityUnprocessableEntity creates a UpdateCapabilityUnprocessableEntity with default headers values
func NewUpdateCapabilityUnprocessableEntity() *UpdateCapabilityUnprocessableEntity {
	return &UpdateCapabilityUnprocessableEntity{}
}

/*UpdateCapabilityUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type UpdateCapabilityUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *UpdateCapabilityUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateCapabilityUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateCapabilityUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityTooManyRequests creates a UpdateCapabilityTooManyRequests with default headers values
func NewUpdateCapabilityTooManyRequests() *UpdateCapabilityTooManyRequests {
	return &UpdateCapabilityTooManyRequests{}
}

/*UpdateCapabilityTooManyRequests handles this case with default header values.

Too many requests
*/
type UpdateCapabilityTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *UpdateCapabilityTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapabilityTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCapabilityTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateCapabilityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCapabilityDefault creates a UpdateCapabilityDefault with default headers values
func NewUpdateCapabilityDefault(code int) *UpdateCapabilityDefault {
	return &UpdateCapabilityDefault{
		_statusCode: code,
	}
}

/*UpdateCapabilityDefault handles this case with default header values.

Unexpected error
*/
type UpdateCapabilityDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the update capability default response
func (o *UpdateCapabilityDefault) Code() int {
	return o._statusCode
}

func (o *UpdateCapabilityDefault) Error() string {
	return fmt.Sprintf("[PUT /capabilities/{capabilityId}/{capabilityVersion}][%d] updateCapability default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateCapabilityDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateCapabilityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
