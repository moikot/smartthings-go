// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventOwnerType Type of owner for the Event. `ownerType` and `ownerId` work in tandem as a composite identifier. Possible values include:
// * `NOT_SET` (default)
// * `LOCATION` (future use) Many services are not yet configured to look at ownerId to get the location id.
// * `USER` (most common use) The only way to specify a user id through the ownerId field.
//
//
// swagger:model EventOwnerType
type EventOwnerType string

const (

	// EventOwnerTypeNOTSET captures enum value "NOT_SET"
	EventOwnerTypeNOTSET EventOwnerType = "NOT_SET"

	// EventOwnerTypeLOCATION captures enum value "LOCATION"
	EventOwnerTypeLOCATION EventOwnerType = "LOCATION"

	// EventOwnerTypeUSER captures enum value "USER"
	EventOwnerTypeUSER EventOwnerType = "USER"
)

// for schema
var eventOwnerTypeEnum []interface{}

func init() {
	var res []EventOwnerType
	if err := json.Unmarshal([]byte(`["NOT_SET","LOCATION","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventOwnerTypeEnum = append(eventOwnerTypeEnum, v)
	}
}

func (m EventOwnerType) validateEventOwnerTypeEnum(path, location string, value EventOwnerType) error {
	if err := validate.EnumCase(path, location, value, eventOwnerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this event owner type
func (m EventOwnerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventOwnerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
